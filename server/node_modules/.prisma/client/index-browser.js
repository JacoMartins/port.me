
Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal
} = require('@prisma/client/runtime/index-browser')


const Prisma = {}

exports.Prisma = Prisma

/**
 * Prisma Client JS version: 3.14.0
 * Query Engine version: 2b0c12756921c891fec4f68d9444e18c7d5d4a6a
 */
Prisma.prismaVersion = {
  client: "3.14.0",
  engine: "2b0c12756921c891fec4f68d9444e18c7d5d4a6a"
}

Prisma.PrismaClientKnownRequestError = () => {
  throw new Error(`PrismaClientKnownRequestError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  throw new Error(`PrismaClientUnknownRequestError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientRustPanicError = () => {
  throw new Error(`PrismaClientRustPanicError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientInitializationError = () => {
  throw new Error(`PrismaClientInitializationError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientValidationError = () => {
  throw new Error(`PrismaClientValidationError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  throw new Error(`sqltag is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.empty = () => {
  throw new Error(`empty is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.join = () => {
  throw new Error(`join is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.raw = () => {
  throw new Error(`raw is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.validator = () => (val) => val

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = 'DbNull'
Prisma.JsonNull = 'JsonNull'
Prisma.AnyNull = 'AnyNull'

/**
 * Enums
 */
// Based on
// https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275
function makeEnum(x) { return x; }

exports.Prisma.AccountScalarFieldEnum = makeEnum({
  id: 'id',
  username: 'username',
  first_name: 'first_name',
  last_name: 'last_name',
  email: 'email',
  created_at: 'created_at',
  password: 'password',
  priv_level: 'priv_level'
});

exports.Prisma.ProfileScalarFieldEnum = makeEnum({
  username: 'username',
  first_name: 'first_name',
  last_name: 'last_name',
  email: 'email',
  greeting: 'greeting',
  color: 'color',
  description: 'description',
  profile_picture: 'profile_picture',
  profile_cover: 'profile_cover',
  profile_animation: 'profile_animation',
  id: 'id'
});

exports.Prisma.SectionsScalarFieldEnum = makeEnum({
  id: 'id',
  username: 'username',
  title: 'title'
});

exports.Prisma.SectionsComponentsScalarFieldEnum = makeEnum({
  id: 'id',
  section_id: 'section_id',
  type: 'type',
  title: 'title',
  value: 'value',
  description: 'description'
});

exports.Prisma.ComponentItemsScalarFieldEnum = makeEnum({
  id: 'id',
  component_id: 'component_id',
  type: 'type',
  title: 'title',
  value: 'value',
  description: 'description',
  icon: 'icon',
  path: 'path'
});

exports.Prisma.AccountTokenScalarFieldEnum = makeEnum({
  id: 'id',
  refresh_token: 'refresh_token',
  account_id: 'account_id',
  expires_date: 'expires_date',
  created_at: 'created_at'
});

exports.Prisma.SortOrder = makeEnum({
  asc: 'asc',
  desc: 'desc'
});


exports.Prisma.ModelName = makeEnum({
  Account: 'Account',
  Profile: 'Profile',
  Sections: 'Sections',
  SectionsComponents: 'SectionsComponents',
  ComponentItems: 'ComponentItems',
  AccountToken: 'AccountToken'
});

/**
 * Create the Client
 */
class PrismaClient {
  constructor() {
    throw new Error(
      `PrismaClient is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
    )
  }
}
exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
