
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/index';
declare const prisma: unique symbol
export type PrismaPromise<A> = Promise<A> & {[prisma]: true}
type UnwrapPromise<P extends any> = P extends Promise<infer R> ? R : P
type UnwrapTuple<Tuple extends readonly unknown[]> = {
  [K in keyof Tuple]: K extends `${number}` ? Tuple[K] extends PrismaPromise<infer X> ? X : UnwrapPromise<Tuple[K]> : UnwrapPromise<Tuple[K]>
};


/**
 * Model Account
 * 
 */
export type Account = {
  id: string
  username: string
  first_name: string | null
  last_name: string | null
  email: string
  created_at: Date
  password: string
  priv_level: number | null
}

/**
 * Model Profile
 * 
 */
export type Profile = {
  username: string
  first_name: string
  last_name: string
  email: string
  greeting: string
  color: string | null
  description: string
  profile_picture: string | null
  profile_cover: string | null
  profile_animation: string | null
  id: string
}

/**
 * Model Sections
 * 
 */
export type Sections = {
  id: string
  username: string
  title: string
}

/**
 * Model SectionsComponents
 * 
 */
export type SectionsComponents = {
  id: string
  section_id: string
  type: string
  title: string
  value: number | null
  description: string
}

/**
 * Model ComponentItems
 * 
 */
export type ComponentItems = {
  id: string
  component_id: string
  type: string
  title: string
  value: number | null
  description: string
  icon: string | null
  path: string | null
}

/**
 * Model AccountToken
 * 
 */
export type AccountToken = {
  id: string
  refresh_token: string
  account_id: string
  expires_date: Date
  created_at: Date
}


/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Accounts
 * const accounts = await prisma.account.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  GlobalReject = 'rejectOnNotFound' extends keyof T
    ? T['rejectOnNotFound']
    : false
      > {
      /**
       * @private
       */
      private fetcher;
      /**
       * @private
       */
      private readonly dmmf;
      /**
       * @private
       */
      private connectionPromise?;
      /**
       * @private
       */
      private disconnectionPromise?;
      /**
       * @private
       */
      private readonly engineConfig;
      /**
       * @private
       */
      private readonly measurePerformance;

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Accounts
   * const accounts = await prisma.account.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends (U | 'beforeExit')>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : V extends 'beforeExit' ? () => Promise<void> : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): Promise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): Promise<void>;

  /**
   * Add a middleware
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends PrismaPromise<any>[]>(arg: [...P]): Promise<UnwrapTuple<P>>;

      /**
   * `prisma.account`: Exposes CRUD operations for the **Account** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Accounts
    * const accounts = await prisma.account.findMany()
    * ```
    */
  get account(): Prisma.AccountDelegate<GlobalReject>;

  /**
   * `prisma.profile`: Exposes CRUD operations for the **Profile** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Profiles
    * const profiles = await prisma.profile.findMany()
    * ```
    */
  get profile(): Prisma.ProfileDelegate<GlobalReject>;

  /**
   * `prisma.sections`: Exposes CRUD operations for the **Sections** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Sections
    * const sections = await prisma.sections.findMany()
    * ```
    */
  get sections(): Prisma.SectionsDelegate<GlobalReject>;

  /**
   * `prisma.sectionsComponents`: Exposes CRUD operations for the **SectionsComponents** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more SectionsComponents
    * const sectionsComponents = await prisma.sectionsComponents.findMany()
    * ```
    */
  get sectionsComponents(): Prisma.SectionsComponentsDelegate<GlobalReject>;

  /**
   * `prisma.componentItems`: Exposes CRUD operations for the **ComponentItems** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ComponentItems
    * const componentItems = await prisma.componentItems.findMany()
    * ```
    */
  get componentItems(): Prisma.ComponentItemsDelegate<GlobalReject>;

  /**
   * `prisma.accountToken`: Exposes CRUD operations for the **AccountToken** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more AccountTokens
    * const accountTokens = await prisma.accountToken.findMany()
    * ```
    */
  get accountToken(): Prisma.AccountTokenDelegate<GlobalReject>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  /**
   * Prisma Client JS version: 3.14.0
   * Query Engine version: 2b0c12756921c891fec4f68d9444e18c7d5d4a6a
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: 'DbNull'

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: 'JsonNull'

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: 'AnyNull'

  type SelectAndInclude = {
    select: any
    include: any
  }
  type HasSelect = {
    select: any
  }
  type HasInclude = {
    include: any
  }
  type CheckSelect<T, S, U> = T extends SelectAndInclude
    ? 'Please either choose `select` or `include`'
    : T extends HasSelect
    ? U
    : T extends HasInclude
    ? U
    : S

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => Promise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = {
    [key in keyof T]: T[key] extends false | undefined | null ? never : key
  }[keyof T]

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Buffer
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Exact<A, W = unknown> = 
  W extends unknown ? A extends Narrowable ? Cast<A, W> : Cast<
  {[K in keyof A]: K extends keyof W ? Exact<A[K], W[K]> : never},
  {[K in keyof W]: K extends keyof A ? Exact<A[K], W[K]> : W[K]}>
  : never;

  type Narrowable = string | number | boolean | bigint;

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;

  export function validator<V>(): <S>(select: Exact<S, V>) => S;

  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but with an array
   */
  type PickArray<T, K extends Array<keyof T>> = Prisma__Pick<T, TupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T

  class PrismaClientFetcher {
    private readonly prisma;
    private readonly debug;
    private readonly hooks?;
    constructor(prisma: PrismaClient<any, any>, debug?: boolean, hooks?: Hooks | undefined);
    request<T>(document: any, dataPath?: string[], rootField?: string, typeName?: string, isList?: boolean, callsite?: string): Promise<T>;
    sanitizeMessage(message: string): string;
    protected unpack(document: any, data: any, path: string[], rootField?: string, isList?: boolean): any;
  }

  export const ModelName: {
    Account: 'Account',
    Profile: 'Profile',
    Sections: 'Sections',
    SectionsComponents: 'SectionsComponents',
    ComponentItems: 'ComponentItems',
    AccountToken: 'AccountToken'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  export type RejectOnNotFound = boolean | ((error: Error) => Error)
  export type RejectPerModel = { [P in ModelName]?: RejectOnNotFound }
  export type RejectPerOperation =  { [P in "findUnique" | "findFirst"]?: RejectPerModel | RejectOnNotFound } 
  type IsReject<T> = T extends true ? True : T extends (err: Error) => Error ? True : False
  export type HasReject<
    GlobalRejectSettings extends Prisma.PrismaClientOptions['rejectOnNotFound'],
    LocalRejectSettings,
    Action extends PrismaAction,
    Model extends ModelName
  > = LocalRejectSettings extends RejectOnNotFound
    ? IsReject<LocalRejectSettings>
    : GlobalRejectSettings extends RejectPerOperation
    ? Action extends keyof GlobalRejectSettings
      ? GlobalRejectSettings[Action] extends RejectOnNotFound
        ? IsReject<GlobalRejectSettings[Action]>
        : GlobalRejectSettings[Action] extends RejectPerModel
        ? Model extends keyof GlobalRejectSettings[Action]
          ? IsReject<GlobalRejectSettings[Action][Model]>
          : False
        : False
      : False
    : IsReject<GlobalRejectSettings>
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'

  export interface PrismaClientOptions {
    /**
     * Configure findUnique/findFirst to throw an error if the query returns null. 
     *  * @example
     * ```
     * // Reject on both findUnique/findFirst
     * rejectOnNotFound: true
     * // Reject only on findFirst with a custom error
     * rejectOnNotFound: { findFirst: (err) => new Error("Custom Error")}
     * // Reject on user.findUnique with a custom error
     * rejectOnNotFound: { findUnique: {User: (err) => new Error("User not found")}}
     * ```
     */
    rejectOnNotFound?: RejectOnNotFound | RejectPerOperation
    /**
     * Overwrites the datasource url from your prisma.schema file
     */
    datasources?: Datasources

    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat

    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *  { emit: 'stdout', level: 'query' },
     *  { emit: 'stdout', level: 'info' },
     *  { emit: 'stdout', level: 'warn' }
     *  { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: Array<LogLevel | LogDefinition>
  }

  export type Hooks = {
    beforeRequest?: (options: { query: string, path: string[], rootField?: string, typeName?: string, document: any }) => any
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findMany'
    | 'findFirst'
    | 'create'
    | 'createMany'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'

  /**
   * These options are being passed in to the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => Promise<T>,
  ) => Promise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type AccountCountOutputType
   */


  export type AccountCountOutputType = {
    tokens: number
  }

  export type AccountCountOutputTypeSelect = {
    tokens?: boolean
  }

  export type AccountCountOutputTypeGetPayload<
    S extends boolean | null | undefined | AccountCountOutputTypeArgs,
    U = keyof S
      > = S extends true
        ? AccountCountOutputType
    : S extends undefined
    ? never
    : S extends AccountCountOutputTypeArgs
    ?'include' extends U
    ? AccountCountOutputType 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
    P extends keyof AccountCountOutputType ? AccountCountOutputType[P] : never
  } 
    : AccountCountOutputType
  : AccountCountOutputType




  // Custom InputTypes

  /**
   * AccountCountOutputType without action
   */
  export type AccountCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the AccountCountOutputType
     * 
    **/
    select?: AccountCountOutputTypeSelect | null
  }



  /**
   * Count Type ProfileCountOutputType
   */


  export type ProfileCountOutputType = {
    sections: number
  }

  export type ProfileCountOutputTypeSelect = {
    sections?: boolean
  }

  export type ProfileCountOutputTypeGetPayload<
    S extends boolean | null | undefined | ProfileCountOutputTypeArgs,
    U = keyof S
      > = S extends true
        ? ProfileCountOutputType
    : S extends undefined
    ? never
    : S extends ProfileCountOutputTypeArgs
    ?'include' extends U
    ? ProfileCountOutputType 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
    P extends keyof ProfileCountOutputType ? ProfileCountOutputType[P] : never
  } 
    : ProfileCountOutputType
  : ProfileCountOutputType




  // Custom InputTypes

  /**
   * ProfileCountOutputType without action
   */
  export type ProfileCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the ProfileCountOutputType
     * 
    **/
    select?: ProfileCountOutputTypeSelect | null
  }



  /**
   * Count Type SectionsCountOutputType
   */


  export type SectionsCountOutputType = {
    components: number
  }

  export type SectionsCountOutputTypeSelect = {
    components?: boolean
  }

  export type SectionsCountOutputTypeGetPayload<
    S extends boolean | null | undefined | SectionsCountOutputTypeArgs,
    U = keyof S
      > = S extends true
        ? SectionsCountOutputType
    : S extends undefined
    ? never
    : S extends SectionsCountOutputTypeArgs
    ?'include' extends U
    ? SectionsCountOutputType 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
    P extends keyof SectionsCountOutputType ? SectionsCountOutputType[P] : never
  } 
    : SectionsCountOutputType
  : SectionsCountOutputType




  // Custom InputTypes

  /**
   * SectionsCountOutputType without action
   */
  export type SectionsCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the SectionsCountOutputType
     * 
    **/
    select?: SectionsCountOutputTypeSelect | null
  }



  /**
   * Count Type SectionsComponentsCountOutputType
   */


  export type SectionsComponentsCountOutputType = {
    items: number
  }

  export type SectionsComponentsCountOutputTypeSelect = {
    items?: boolean
  }

  export type SectionsComponentsCountOutputTypeGetPayload<
    S extends boolean | null | undefined | SectionsComponentsCountOutputTypeArgs,
    U = keyof S
      > = S extends true
        ? SectionsComponentsCountOutputType
    : S extends undefined
    ? never
    : S extends SectionsComponentsCountOutputTypeArgs
    ?'include' extends U
    ? SectionsComponentsCountOutputType 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
    P extends keyof SectionsComponentsCountOutputType ? SectionsComponentsCountOutputType[P] : never
  } 
    : SectionsComponentsCountOutputType
  : SectionsComponentsCountOutputType




  // Custom InputTypes

  /**
   * SectionsComponentsCountOutputType without action
   */
  export type SectionsComponentsCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the SectionsComponentsCountOutputType
     * 
    **/
    select?: SectionsComponentsCountOutputTypeSelect | null
  }



  /**
   * Models
   */

  /**
   * Model Account
   */


  export type AggregateAccount = {
    _count: AccountCountAggregateOutputType | null
    _avg: AccountAvgAggregateOutputType | null
    _sum: AccountSumAggregateOutputType | null
    _min: AccountMinAggregateOutputType | null
    _max: AccountMaxAggregateOutputType | null
  }

  export type AccountAvgAggregateOutputType = {
    priv_level: number | null
  }

  export type AccountSumAggregateOutputType = {
    priv_level: number | null
  }

  export type AccountMinAggregateOutputType = {
    id: string | null
    username: string | null
    first_name: string | null
    last_name: string | null
    email: string | null
    created_at: Date | null
    password: string | null
    priv_level: number | null
  }

  export type AccountMaxAggregateOutputType = {
    id: string | null
    username: string | null
    first_name: string | null
    last_name: string | null
    email: string | null
    created_at: Date | null
    password: string | null
    priv_level: number | null
  }

  export type AccountCountAggregateOutputType = {
    id: number
    username: number
    first_name: number
    last_name: number
    email: number
    created_at: number
    password: number
    priv_level: number
    _all: number
  }


  export type AccountAvgAggregateInputType = {
    priv_level?: true
  }

  export type AccountSumAggregateInputType = {
    priv_level?: true
  }

  export type AccountMinAggregateInputType = {
    id?: true
    username?: true
    first_name?: true
    last_name?: true
    email?: true
    created_at?: true
    password?: true
    priv_level?: true
  }

  export type AccountMaxAggregateInputType = {
    id?: true
    username?: true
    first_name?: true
    last_name?: true
    email?: true
    created_at?: true
    password?: true
    priv_level?: true
  }

  export type AccountCountAggregateInputType = {
    id?: true
    username?: true
    first_name?: true
    last_name?: true
    email?: true
    created_at?: true
    password?: true
    priv_level?: true
    _all?: true
  }

  export type AccountAggregateArgs = {
    /**
     * Filter which Account to aggregate.
     * 
    **/
    where?: AccountWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Accounts to fetch.
     * 
    **/
    orderBy?: Enumerable<AccountOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: AccountWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Accounts from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Accounts.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Accounts
    **/
    _count?: true | AccountCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: AccountAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: AccountSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AccountMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AccountMaxAggregateInputType
  }

  export type GetAccountAggregateType<T extends AccountAggregateArgs> = {
        [P in keyof T & keyof AggregateAccount]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAccount[P]>
      : GetScalarType<T[P], AggregateAccount[P]>
  }




  export type AccountGroupByArgs = {
    where?: AccountWhereInput
    orderBy?: Enumerable<AccountOrderByWithAggregationInput>
    by: Array<AccountScalarFieldEnum>
    having?: AccountScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AccountCountAggregateInputType | true
    _avg?: AccountAvgAggregateInputType
    _sum?: AccountSumAggregateInputType
    _min?: AccountMinAggregateInputType
    _max?: AccountMaxAggregateInputType
  }


  export type AccountGroupByOutputType = {
    id: string
    username: string
    first_name: string | null
    last_name: string | null
    email: string
    created_at: Date
    password: string
    priv_level: number | null
    _count: AccountCountAggregateOutputType | null
    _avg: AccountAvgAggregateOutputType | null
    _sum: AccountSumAggregateOutputType | null
    _min: AccountMinAggregateOutputType | null
    _max: AccountMaxAggregateOutputType | null
  }

  type GetAccountGroupByPayload<T extends AccountGroupByArgs> = PrismaPromise<
    Array<
      PickArray<AccountGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AccountGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AccountGroupByOutputType[P]>
            : GetScalarType<T[P], AccountGroupByOutputType[P]>
        }
      >
    >


  export type AccountSelect = {
    id?: boolean
    username?: boolean
    first_name?: boolean
    last_name?: boolean
    email?: boolean
    created_at?: boolean
    password?: boolean
    priv_level?: boolean
    tokens?: boolean | AccountTokenFindManyArgs
    profile?: boolean | ProfileArgs
    _count?: boolean | AccountCountOutputTypeArgs
  }

  export type AccountInclude = {
    tokens?: boolean | AccountTokenFindManyArgs
    profile?: boolean | ProfileArgs
    _count?: boolean | AccountCountOutputTypeArgs
  }

  export type AccountGetPayload<
    S extends boolean | null | undefined | AccountArgs,
    U = keyof S
      > = S extends true
        ? Account
    : S extends undefined
    ? never
    : S extends AccountArgs | AccountFindManyArgs
    ?'include' extends U
    ? Account  & {
    [P in TrueKeys<S['include']>]:
        P extends 'tokens' ? Array < AccountTokenGetPayload<S['include'][P]>>  :
        P extends 'profile' ? ProfileGetPayload<S['include'][P]> :
        P extends '_count' ? AccountCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'tokens' ? Array < AccountTokenGetPayload<S['select'][P]>>  :
        P extends 'profile' ? ProfileGetPayload<S['select'][P]> :
        P extends '_count' ? AccountCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof Account ? Account[P] : never
  } 
    : Account
  : Account


  type AccountCountArgs = Merge<
    Omit<AccountFindManyArgs, 'select' | 'include'> & {
      select?: AccountCountAggregateInputType | true
    }
  >

  export interface AccountDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Account that matches the filter.
     * @param {AccountFindUniqueArgs} args - Arguments to find a Account
     * @example
     * // Get one Account
     * const account = await prisma.account.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends AccountFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, AccountFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Account'> extends True ? CheckSelect<T, Prisma__AccountClient<Account>, Prisma__AccountClient<AccountGetPayload<T>>> : CheckSelect<T, Prisma__AccountClient<Account | null >, Prisma__AccountClient<AccountGetPayload<T> | null >>

    /**
     * Find the first Account that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountFindFirstArgs} args - Arguments to find a Account
     * @example
     * // Get one Account
     * const account = await prisma.account.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends AccountFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, AccountFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Account'> extends True ? CheckSelect<T, Prisma__AccountClient<Account>, Prisma__AccountClient<AccountGetPayload<T>>> : CheckSelect<T, Prisma__AccountClient<Account | null >, Prisma__AccountClient<AccountGetPayload<T> | null >>

    /**
     * Find zero or more Accounts that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Accounts
     * const accounts = await prisma.account.findMany()
     * 
     * // Get first 10 Accounts
     * const accounts = await prisma.account.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const accountWithIdOnly = await prisma.account.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends AccountFindManyArgs>(
      args?: SelectSubset<T, AccountFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<Account>>, PrismaPromise<Array<AccountGetPayload<T>>>>

    /**
     * Create a Account.
     * @param {AccountCreateArgs} args - Arguments to create a Account.
     * @example
     * // Create one Account
     * const Account = await prisma.account.create({
     *   data: {
     *     // ... data to create a Account
     *   }
     * })
     * 
    **/
    create<T extends AccountCreateArgs>(
      args: SelectSubset<T, AccountCreateArgs>
    ): CheckSelect<T, Prisma__AccountClient<Account>, Prisma__AccountClient<AccountGetPayload<T>>>

    /**
     * Create many Accounts.
     *     @param {AccountCreateManyArgs} args - Arguments to create many Accounts.
     *     @example
     *     // Create many Accounts
     *     const account = await prisma.account.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends AccountCreateManyArgs>(
      args?: SelectSubset<T, AccountCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Account.
     * @param {AccountDeleteArgs} args - Arguments to delete one Account.
     * @example
     * // Delete one Account
     * const Account = await prisma.account.delete({
     *   where: {
     *     // ... filter to delete one Account
     *   }
     * })
     * 
    **/
    delete<T extends AccountDeleteArgs>(
      args: SelectSubset<T, AccountDeleteArgs>
    ): CheckSelect<T, Prisma__AccountClient<Account>, Prisma__AccountClient<AccountGetPayload<T>>>

    /**
     * Update one Account.
     * @param {AccountUpdateArgs} args - Arguments to update one Account.
     * @example
     * // Update one Account
     * const account = await prisma.account.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends AccountUpdateArgs>(
      args: SelectSubset<T, AccountUpdateArgs>
    ): CheckSelect<T, Prisma__AccountClient<Account>, Prisma__AccountClient<AccountGetPayload<T>>>

    /**
     * Delete zero or more Accounts.
     * @param {AccountDeleteManyArgs} args - Arguments to filter Accounts to delete.
     * @example
     * // Delete a few Accounts
     * const { count } = await prisma.account.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends AccountDeleteManyArgs>(
      args?: SelectSubset<T, AccountDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Accounts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Accounts
     * const account = await prisma.account.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends AccountUpdateManyArgs>(
      args: SelectSubset<T, AccountUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Account.
     * @param {AccountUpsertArgs} args - Arguments to update or create a Account.
     * @example
     * // Update or create a Account
     * const account = await prisma.account.upsert({
     *   create: {
     *     // ... data to create a Account
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Account we want to update
     *   }
     * })
    **/
    upsert<T extends AccountUpsertArgs>(
      args: SelectSubset<T, AccountUpsertArgs>
    ): CheckSelect<T, Prisma__AccountClient<Account>, Prisma__AccountClient<AccountGetPayload<T>>>

    /**
     * Count the number of Accounts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountCountArgs} args - Arguments to filter Accounts to count.
     * @example
     * // Count the number of Accounts
     * const count = await prisma.account.count({
     *   where: {
     *     // ... the filter for the Accounts we want to count
     *   }
     * })
    **/
    count<T extends AccountCountArgs>(
      args?: Subset<T, AccountCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AccountCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Account.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AccountAggregateArgs>(args: Subset<T, AccountAggregateArgs>): PrismaPromise<GetAccountAggregateType<T>>

    /**
     * Group by Account.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AccountGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AccountGroupByArgs['orderBy'] }
        : { orderBy?: AccountGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AccountGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAccountGroupByPayload<T> : PrismaPromise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for Account.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__AccountClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    tokens<T extends AccountTokenFindManyArgs = {}>(args?: Subset<T, AccountTokenFindManyArgs>): CheckSelect<T, PrismaPromise<Array<AccountToken>>, PrismaPromise<Array<AccountTokenGetPayload<T>>>>;

    profile<T extends ProfileArgs = {}>(args?: Subset<T, ProfileArgs>): CheckSelect<T, Prisma__ProfileClient<Profile | null >, Prisma__ProfileClient<ProfileGetPayload<T> | null >>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * Account findUnique
   */
  export type AccountFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the Account
     * 
    **/
    select?: AccountSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: AccountInclude | null
    /**
     * Throw an Error if a Account can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Account to fetch.
     * 
    **/
    where: AccountWhereUniqueInput
  }


  /**
   * Account findFirst
   */
  export type AccountFindFirstArgs = {
    /**
     * Select specific fields to fetch from the Account
     * 
    **/
    select?: AccountSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: AccountInclude | null
    /**
     * Throw an Error if a Account can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Account to fetch.
     * 
    **/
    where?: AccountWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Accounts to fetch.
     * 
    **/
    orderBy?: Enumerable<AccountOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Accounts.
     * 
    **/
    cursor?: AccountWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Accounts from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Accounts.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Accounts.
     * 
    **/
    distinct?: Enumerable<AccountScalarFieldEnum>
  }


  /**
   * Account findMany
   */
  export type AccountFindManyArgs = {
    /**
     * Select specific fields to fetch from the Account
     * 
    **/
    select?: AccountSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: AccountInclude | null
    /**
     * Filter, which Accounts to fetch.
     * 
    **/
    where?: AccountWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Accounts to fetch.
     * 
    **/
    orderBy?: Enumerable<AccountOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Accounts.
     * 
    **/
    cursor?: AccountWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Accounts from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Accounts.
     * 
    **/
    skip?: number
    distinct?: Enumerable<AccountScalarFieldEnum>
  }


  /**
   * Account create
   */
  export type AccountCreateArgs = {
    /**
     * Select specific fields to fetch from the Account
     * 
    **/
    select?: AccountSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: AccountInclude | null
    /**
     * The data needed to create a Account.
     * 
    **/
    data: XOR<AccountCreateInput, AccountUncheckedCreateInput>
  }


  /**
   * Account createMany
   */
  export type AccountCreateManyArgs = {
    /**
     * The data used to create many Accounts.
     * 
    **/
    data: Enumerable<AccountCreateManyInput>
  }


  /**
   * Account update
   */
  export type AccountUpdateArgs = {
    /**
     * Select specific fields to fetch from the Account
     * 
    **/
    select?: AccountSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: AccountInclude | null
    /**
     * The data needed to update a Account.
     * 
    **/
    data: XOR<AccountUpdateInput, AccountUncheckedUpdateInput>
    /**
     * Choose, which Account to update.
     * 
    **/
    where: AccountWhereUniqueInput
  }


  /**
   * Account updateMany
   */
  export type AccountUpdateManyArgs = {
    /**
     * The data used to update Accounts.
     * 
    **/
    data: XOR<AccountUpdateManyMutationInput, AccountUncheckedUpdateManyInput>
    /**
     * Filter which Accounts to update
     * 
    **/
    where?: AccountWhereInput
  }


  /**
   * Account upsert
   */
  export type AccountUpsertArgs = {
    /**
     * Select specific fields to fetch from the Account
     * 
    **/
    select?: AccountSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: AccountInclude | null
    /**
     * The filter to search for the Account to update in case it exists.
     * 
    **/
    where: AccountWhereUniqueInput
    /**
     * In case the Account found by the `where` argument doesn't exist, create a new Account with this data.
     * 
    **/
    create: XOR<AccountCreateInput, AccountUncheckedCreateInput>
    /**
     * In case the Account was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<AccountUpdateInput, AccountUncheckedUpdateInput>
  }


  /**
   * Account delete
   */
  export type AccountDeleteArgs = {
    /**
     * Select specific fields to fetch from the Account
     * 
    **/
    select?: AccountSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: AccountInclude | null
    /**
     * Filter which Account to delete.
     * 
    **/
    where: AccountWhereUniqueInput
  }


  /**
   * Account deleteMany
   */
  export type AccountDeleteManyArgs = {
    /**
     * Filter which Accounts to delete
     * 
    **/
    where?: AccountWhereInput
  }


  /**
   * Account without action
   */
  export type AccountArgs = {
    /**
     * Select specific fields to fetch from the Account
     * 
    **/
    select?: AccountSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: AccountInclude | null
  }



  /**
   * Model Profile
   */


  export type AggregateProfile = {
    _count: ProfileCountAggregateOutputType | null
    _min: ProfileMinAggregateOutputType | null
    _max: ProfileMaxAggregateOutputType | null
  }

  export type ProfileMinAggregateOutputType = {
    username: string | null
    first_name: string | null
    last_name: string | null
    email: string | null
    greeting: string | null
    color: string | null
    description: string | null
    profile_picture: string | null
    profile_cover: string | null
    profile_animation: string | null
    id: string | null
  }

  export type ProfileMaxAggregateOutputType = {
    username: string | null
    first_name: string | null
    last_name: string | null
    email: string | null
    greeting: string | null
    color: string | null
    description: string | null
    profile_picture: string | null
    profile_cover: string | null
    profile_animation: string | null
    id: string | null
  }

  export type ProfileCountAggregateOutputType = {
    username: number
    first_name: number
    last_name: number
    email: number
    greeting: number
    color: number
    description: number
    profile_picture: number
    profile_cover: number
    profile_animation: number
    id: number
    _all: number
  }


  export type ProfileMinAggregateInputType = {
    username?: true
    first_name?: true
    last_name?: true
    email?: true
    greeting?: true
    color?: true
    description?: true
    profile_picture?: true
    profile_cover?: true
    profile_animation?: true
    id?: true
  }

  export type ProfileMaxAggregateInputType = {
    username?: true
    first_name?: true
    last_name?: true
    email?: true
    greeting?: true
    color?: true
    description?: true
    profile_picture?: true
    profile_cover?: true
    profile_animation?: true
    id?: true
  }

  export type ProfileCountAggregateInputType = {
    username?: true
    first_name?: true
    last_name?: true
    email?: true
    greeting?: true
    color?: true
    description?: true
    profile_picture?: true
    profile_cover?: true
    profile_animation?: true
    id?: true
    _all?: true
  }

  export type ProfileAggregateArgs = {
    /**
     * Filter which Profile to aggregate.
     * 
    **/
    where?: ProfileWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Profiles to fetch.
     * 
    **/
    orderBy?: Enumerable<ProfileOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: ProfileWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Profiles from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Profiles.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Profiles
    **/
    _count?: true | ProfileCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ProfileMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ProfileMaxAggregateInputType
  }

  export type GetProfileAggregateType<T extends ProfileAggregateArgs> = {
        [P in keyof T & keyof AggregateProfile]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateProfile[P]>
      : GetScalarType<T[P], AggregateProfile[P]>
  }




  export type ProfileGroupByArgs = {
    where?: ProfileWhereInput
    orderBy?: Enumerable<ProfileOrderByWithAggregationInput>
    by: Array<ProfileScalarFieldEnum>
    having?: ProfileScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ProfileCountAggregateInputType | true
    _min?: ProfileMinAggregateInputType
    _max?: ProfileMaxAggregateInputType
  }


  export type ProfileGroupByOutputType = {
    username: string
    first_name: string
    last_name: string
    email: string
    greeting: string
    color: string | null
    description: string
    profile_picture: string | null
    profile_cover: string | null
    profile_animation: string | null
    id: string
    _count: ProfileCountAggregateOutputType | null
    _min: ProfileMinAggregateOutputType | null
    _max: ProfileMaxAggregateOutputType | null
  }

  type GetProfileGroupByPayload<T extends ProfileGroupByArgs> = PrismaPromise<
    Array<
      PickArray<ProfileGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ProfileGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ProfileGroupByOutputType[P]>
            : GetScalarType<T[P], ProfileGroupByOutputType[P]>
        }
      >
    >


  export type ProfileSelect = {
    username?: boolean
    first_name?: boolean
    last_name?: boolean
    email?: boolean
    greeting?: boolean
    color?: boolean
    description?: boolean
    profile_picture?: boolean
    profile_cover?: boolean
    profile_animation?: boolean
    id?: boolean
    account?: boolean | AccountArgs
    sections?: boolean | SectionsFindManyArgs
    _count?: boolean | ProfileCountOutputTypeArgs
  }

  export type ProfileInclude = {
    account?: boolean | AccountArgs
    sections?: boolean | SectionsFindManyArgs
    _count?: boolean | ProfileCountOutputTypeArgs
  }

  export type ProfileGetPayload<
    S extends boolean | null | undefined | ProfileArgs,
    U = keyof S
      > = S extends true
        ? Profile
    : S extends undefined
    ? never
    : S extends ProfileArgs | ProfileFindManyArgs
    ?'include' extends U
    ? Profile  & {
    [P in TrueKeys<S['include']>]:
        P extends 'account' ? AccountGetPayload<S['include'][P]> | null :
        P extends 'sections' ? Array < SectionsGetPayload<S['include'][P]>>  :
        P extends '_count' ? ProfileCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'account' ? AccountGetPayload<S['select'][P]> | null :
        P extends 'sections' ? Array < SectionsGetPayload<S['select'][P]>>  :
        P extends '_count' ? ProfileCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof Profile ? Profile[P] : never
  } 
    : Profile
  : Profile


  type ProfileCountArgs = Merge<
    Omit<ProfileFindManyArgs, 'select' | 'include'> & {
      select?: ProfileCountAggregateInputType | true
    }
  >

  export interface ProfileDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Profile that matches the filter.
     * @param {ProfileFindUniqueArgs} args - Arguments to find a Profile
     * @example
     * // Get one Profile
     * const profile = await prisma.profile.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ProfileFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, ProfileFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Profile'> extends True ? CheckSelect<T, Prisma__ProfileClient<Profile>, Prisma__ProfileClient<ProfileGetPayload<T>>> : CheckSelect<T, Prisma__ProfileClient<Profile | null >, Prisma__ProfileClient<ProfileGetPayload<T> | null >>

    /**
     * Find the first Profile that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProfileFindFirstArgs} args - Arguments to find a Profile
     * @example
     * // Get one Profile
     * const profile = await prisma.profile.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ProfileFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, ProfileFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Profile'> extends True ? CheckSelect<T, Prisma__ProfileClient<Profile>, Prisma__ProfileClient<ProfileGetPayload<T>>> : CheckSelect<T, Prisma__ProfileClient<Profile | null >, Prisma__ProfileClient<ProfileGetPayload<T> | null >>

    /**
     * Find zero or more Profiles that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProfileFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Profiles
     * const profiles = await prisma.profile.findMany()
     * 
     * // Get first 10 Profiles
     * const profiles = await prisma.profile.findMany({ take: 10 })
     * 
     * // Only select the `username`
     * const profileWithUsernameOnly = await prisma.profile.findMany({ select: { username: true } })
     * 
    **/
    findMany<T extends ProfileFindManyArgs>(
      args?: SelectSubset<T, ProfileFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<Profile>>, PrismaPromise<Array<ProfileGetPayload<T>>>>

    /**
     * Create a Profile.
     * @param {ProfileCreateArgs} args - Arguments to create a Profile.
     * @example
     * // Create one Profile
     * const Profile = await prisma.profile.create({
     *   data: {
     *     // ... data to create a Profile
     *   }
     * })
     * 
    **/
    create<T extends ProfileCreateArgs>(
      args: SelectSubset<T, ProfileCreateArgs>
    ): CheckSelect<T, Prisma__ProfileClient<Profile>, Prisma__ProfileClient<ProfileGetPayload<T>>>

    /**
     * Create many Profiles.
     *     @param {ProfileCreateManyArgs} args - Arguments to create many Profiles.
     *     @example
     *     // Create many Profiles
     *     const profile = await prisma.profile.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends ProfileCreateManyArgs>(
      args?: SelectSubset<T, ProfileCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Profile.
     * @param {ProfileDeleteArgs} args - Arguments to delete one Profile.
     * @example
     * // Delete one Profile
     * const Profile = await prisma.profile.delete({
     *   where: {
     *     // ... filter to delete one Profile
     *   }
     * })
     * 
    **/
    delete<T extends ProfileDeleteArgs>(
      args: SelectSubset<T, ProfileDeleteArgs>
    ): CheckSelect<T, Prisma__ProfileClient<Profile>, Prisma__ProfileClient<ProfileGetPayload<T>>>

    /**
     * Update one Profile.
     * @param {ProfileUpdateArgs} args - Arguments to update one Profile.
     * @example
     * // Update one Profile
     * const profile = await prisma.profile.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ProfileUpdateArgs>(
      args: SelectSubset<T, ProfileUpdateArgs>
    ): CheckSelect<T, Prisma__ProfileClient<Profile>, Prisma__ProfileClient<ProfileGetPayload<T>>>

    /**
     * Delete zero or more Profiles.
     * @param {ProfileDeleteManyArgs} args - Arguments to filter Profiles to delete.
     * @example
     * // Delete a few Profiles
     * const { count } = await prisma.profile.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ProfileDeleteManyArgs>(
      args?: SelectSubset<T, ProfileDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Profiles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProfileUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Profiles
     * const profile = await prisma.profile.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ProfileUpdateManyArgs>(
      args: SelectSubset<T, ProfileUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Profile.
     * @param {ProfileUpsertArgs} args - Arguments to update or create a Profile.
     * @example
     * // Update or create a Profile
     * const profile = await prisma.profile.upsert({
     *   create: {
     *     // ... data to create a Profile
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Profile we want to update
     *   }
     * })
    **/
    upsert<T extends ProfileUpsertArgs>(
      args: SelectSubset<T, ProfileUpsertArgs>
    ): CheckSelect<T, Prisma__ProfileClient<Profile>, Prisma__ProfileClient<ProfileGetPayload<T>>>

    /**
     * Count the number of Profiles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProfileCountArgs} args - Arguments to filter Profiles to count.
     * @example
     * // Count the number of Profiles
     * const count = await prisma.profile.count({
     *   where: {
     *     // ... the filter for the Profiles we want to count
     *   }
     * })
    **/
    count<T extends ProfileCountArgs>(
      args?: Subset<T, ProfileCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ProfileCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Profile.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProfileAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ProfileAggregateArgs>(args: Subset<T, ProfileAggregateArgs>): PrismaPromise<GetProfileAggregateType<T>>

    /**
     * Group by Profile.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProfileGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ProfileGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ProfileGroupByArgs['orderBy'] }
        : { orderBy?: ProfileGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ProfileGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetProfileGroupByPayload<T> : PrismaPromise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for Profile.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__ProfileClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    account<T extends AccountArgs = {}>(args?: Subset<T, AccountArgs>): CheckSelect<T, Prisma__AccountClient<Account | null >, Prisma__AccountClient<AccountGetPayload<T> | null >>;

    sections<T extends SectionsFindManyArgs = {}>(args?: Subset<T, SectionsFindManyArgs>): CheckSelect<T, PrismaPromise<Array<Sections>>, PrismaPromise<Array<SectionsGetPayload<T>>>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * Profile findUnique
   */
  export type ProfileFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the Profile
     * 
    **/
    select?: ProfileSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ProfileInclude | null
    /**
     * Throw an Error if a Profile can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Profile to fetch.
     * 
    **/
    where: ProfileWhereUniqueInput
  }


  /**
   * Profile findFirst
   */
  export type ProfileFindFirstArgs = {
    /**
     * Select specific fields to fetch from the Profile
     * 
    **/
    select?: ProfileSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ProfileInclude | null
    /**
     * Throw an Error if a Profile can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Profile to fetch.
     * 
    **/
    where?: ProfileWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Profiles to fetch.
     * 
    **/
    orderBy?: Enumerable<ProfileOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Profiles.
     * 
    **/
    cursor?: ProfileWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Profiles from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Profiles.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Profiles.
     * 
    **/
    distinct?: Enumerable<ProfileScalarFieldEnum>
  }


  /**
   * Profile findMany
   */
  export type ProfileFindManyArgs = {
    /**
     * Select specific fields to fetch from the Profile
     * 
    **/
    select?: ProfileSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ProfileInclude | null
    /**
     * Filter, which Profiles to fetch.
     * 
    **/
    where?: ProfileWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Profiles to fetch.
     * 
    **/
    orderBy?: Enumerable<ProfileOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Profiles.
     * 
    **/
    cursor?: ProfileWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Profiles from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Profiles.
     * 
    **/
    skip?: number
    distinct?: Enumerable<ProfileScalarFieldEnum>
  }


  /**
   * Profile create
   */
  export type ProfileCreateArgs = {
    /**
     * Select specific fields to fetch from the Profile
     * 
    **/
    select?: ProfileSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ProfileInclude | null
    /**
     * The data needed to create a Profile.
     * 
    **/
    data: XOR<ProfileCreateInput, ProfileUncheckedCreateInput>
  }


  /**
   * Profile createMany
   */
  export type ProfileCreateManyArgs = {
    /**
     * The data used to create many Profiles.
     * 
    **/
    data: Enumerable<ProfileCreateManyInput>
  }


  /**
   * Profile update
   */
  export type ProfileUpdateArgs = {
    /**
     * Select specific fields to fetch from the Profile
     * 
    **/
    select?: ProfileSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ProfileInclude | null
    /**
     * The data needed to update a Profile.
     * 
    **/
    data: XOR<ProfileUpdateInput, ProfileUncheckedUpdateInput>
    /**
     * Choose, which Profile to update.
     * 
    **/
    where: ProfileWhereUniqueInput
  }


  /**
   * Profile updateMany
   */
  export type ProfileUpdateManyArgs = {
    /**
     * The data used to update Profiles.
     * 
    **/
    data: XOR<ProfileUpdateManyMutationInput, ProfileUncheckedUpdateManyInput>
    /**
     * Filter which Profiles to update
     * 
    **/
    where?: ProfileWhereInput
  }


  /**
   * Profile upsert
   */
  export type ProfileUpsertArgs = {
    /**
     * Select specific fields to fetch from the Profile
     * 
    **/
    select?: ProfileSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ProfileInclude | null
    /**
     * The filter to search for the Profile to update in case it exists.
     * 
    **/
    where: ProfileWhereUniqueInput
    /**
     * In case the Profile found by the `where` argument doesn't exist, create a new Profile with this data.
     * 
    **/
    create: XOR<ProfileCreateInput, ProfileUncheckedCreateInput>
    /**
     * In case the Profile was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<ProfileUpdateInput, ProfileUncheckedUpdateInput>
  }


  /**
   * Profile delete
   */
  export type ProfileDeleteArgs = {
    /**
     * Select specific fields to fetch from the Profile
     * 
    **/
    select?: ProfileSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ProfileInclude | null
    /**
     * Filter which Profile to delete.
     * 
    **/
    where: ProfileWhereUniqueInput
  }


  /**
   * Profile deleteMany
   */
  export type ProfileDeleteManyArgs = {
    /**
     * Filter which Profiles to delete
     * 
    **/
    where?: ProfileWhereInput
  }


  /**
   * Profile without action
   */
  export type ProfileArgs = {
    /**
     * Select specific fields to fetch from the Profile
     * 
    **/
    select?: ProfileSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ProfileInclude | null
  }



  /**
   * Model Sections
   */


  export type AggregateSections = {
    _count: SectionsCountAggregateOutputType | null
    _min: SectionsMinAggregateOutputType | null
    _max: SectionsMaxAggregateOutputType | null
  }

  export type SectionsMinAggregateOutputType = {
    id: string | null
    username: string | null
    title: string | null
  }

  export type SectionsMaxAggregateOutputType = {
    id: string | null
    username: string | null
    title: string | null
  }

  export type SectionsCountAggregateOutputType = {
    id: number
    username: number
    title: number
    _all: number
  }


  export type SectionsMinAggregateInputType = {
    id?: true
    username?: true
    title?: true
  }

  export type SectionsMaxAggregateInputType = {
    id?: true
    username?: true
    title?: true
  }

  export type SectionsCountAggregateInputType = {
    id?: true
    username?: true
    title?: true
    _all?: true
  }

  export type SectionsAggregateArgs = {
    /**
     * Filter which Sections to aggregate.
     * 
    **/
    where?: SectionsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sections to fetch.
     * 
    **/
    orderBy?: Enumerable<SectionsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: SectionsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sections from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sections.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Sections
    **/
    _count?: true | SectionsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SectionsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SectionsMaxAggregateInputType
  }

  export type GetSectionsAggregateType<T extends SectionsAggregateArgs> = {
        [P in keyof T & keyof AggregateSections]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSections[P]>
      : GetScalarType<T[P], AggregateSections[P]>
  }




  export type SectionsGroupByArgs = {
    where?: SectionsWhereInput
    orderBy?: Enumerable<SectionsOrderByWithAggregationInput>
    by: Array<SectionsScalarFieldEnum>
    having?: SectionsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SectionsCountAggregateInputType | true
    _min?: SectionsMinAggregateInputType
    _max?: SectionsMaxAggregateInputType
  }


  export type SectionsGroupByOutputType = {
    id: string
    username: string
    title: string
    _count: SectionsCountAggregateOutputType | null
    _min: SectionsMinAggregateOutputType | null
    _max: SectionsMaxAggregateOutputType | null
  }

  type GetSectionsGroupByPayload<T extends SectionsGroupByArgs> = PrismaPromise<
    Array<
      PickArray<SectionsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SectionsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SectionsGroupByOutputType[P]>
            : GetScalarType<T[P], SectionsGroupByOutputType[P]>
        }
      >
    >


  export type SectionsSelect = {
    id?: boolean
    username?: boolean
    title?: boolean
    profile?: boolean | ProfileArgs
    components?: boolean | SectionsComponentsFindManyArgs
    _count?: boolean | SectionsCountOutputTypeArgs
  }

  export type SectionsInclude = {
    profile?: boolean | ProfileArgs
    components?: boolean | SectionsComponentsFindManyArgs
    _count?: boolean | SectionsCountOutputTypeArgs
  }

  export type SectionsGetPayload<
    S extends boolean | null | undefined | SectionsArgs,
    U = keyof S
      > = S extends true
        ? Sections
    : S extends undefined
    ? never
    : S extends SectionsArgs | SectionsFindManyArgs
    ?'include' extends U
    ? Sections  & {
    [P in TrueKeys<S['include']>]:
        P extends 'profile' ? ProfileGetPayload<S['include'][P]> :
        P extends 'components' ? Array < SectionsComponentsGetPayload<S['include'][P]>>  :
        P extends '_count' ? SectionsCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'profile' ? ProfileGetPayload<S['select'][P]> :
        P extends 'components' ? Array < SectionsComponentsGetPayload<S['select'][P]>>  :
        P extends '_count' ? SectionsCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof Sections ? Sections[P] : never
  } 
    : Sections
  : Sections


  type SectionsCountArgs = Merge<
    Omit<SectionsFindManyArgs, 'select' | 'include'> & {
      select?: SectionsCountAggregateInputType | true
    }
  >

  export interface SectionsDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Sections that matches the filter.
     * @param {SectionsFindUniqueArgs} args - Arguments to find a Sections
     * @example
     * // Get one Sections
     * const sections = await prisma.sections.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends SectionsFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, SectionsFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Sections'> extends True ? CheckSelect<T, Prisma__SectionsClient<Sections>, Prisma__SectionsClient<SectionsGetPayload<T>>> : CheckSelect<T, Prisma__SectionsClient<Sections | null >, Prisma__SectionsClient<SectionsGetPayload<T> | null >>

    /**
     * Find the first Sections that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SectionsFindFirstArgs} args - Arguments to find a Sections
     * @example
     * // Get one Sections
     * const sections = await prisma.sections.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends SectionsFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, SectionsFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Sections'> extends True ? CheckSelect<T, Prisma__SectionsClient<Sections>, Prisma__SectionsClient<SectionsGetPayload<T>>> : CheckSelect<T, Prisma__SectionsClient<Sections | null >, Prisma__SectionsClient<SectionsGetPayload<T> | null >>

    /**
     * Find zero or more Sections that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SectionsFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Sections
     * const sections = await prisma.sections.findMany()
     * 
     * // Get first 10 Sections
     * const sections = await prisma.sections.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const sectionsWithIdOnly = await prisma.sections.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends SectionsFindManyArgs>(
      args?: SelectSubset<T, SectionsFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<Sections>>, PrismaPromise<Array<SectionsGetPayload<T>>>>

    /**
     * Create a Sections.
     * @param {SectionsCreateArgs} args - Arguments to create a Sections.
     * @example
     * // Create one Sections
     * const Sections = await prisma.sections.create({
     *   data: {
     *     // ... data to create a Sections
     *   }
     * })
     * 
    **/
    create<T extends SectionsCreateArgs>(
      args: SelectSubset<T, SectionsCreateArgs>
    ): CheckSelect<T, Prisma__SectionsClient<Sections>, Prisma__SectionsClient<SectionsGetPayload<T>>>

    /**
     * Create many Sections.
     *     @param {SectionsCreateManyArgs} args - Arguments to create many Sections.
     *     @example
     *     // Create many Sections
     *     const sections = await prisma.sections.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends SectionsCreateManyArgs>(
      args?: SelectSubset<T, SectionsCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Sections.
     * @param {SectionsDeleteArgs} args - Arguments to delete one Sections.
     * @example
     * // Delete one Sections
     * const Sections = await prisma.sections.delete({
     *   where: {
     *     // ... filter to delete one Sections
     *   }
     * })
     * 
    **/
    delete<T extends SectionsDeleteArgs>(
      args: SelectSubset<T, SectionsDeleteArgs>
    ): CheckSelect<T, Prisma__SectionsClient<Sections>, Prisma__SectionsClient<SectionsGetPayload<T>>>

    /**
     * Update one Sections.
     * @param {SectionsUpdateArgs} args - Arguments to update one Sections.
     * @example
     * // Update one Sections
     * const sections = await prisma.sections.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends SectionsUpdateArgs>(
      args: SelectSubset<T, SectionsUpdateArgs>
    ): CheckSelect<T, Prisma__SectionsClient<Sections>, Prisma__SectionsClient<SectionsGetPayload<T>>>

    /**
     * Delete zero or more Sections.
     * @param {SectionsDeleteManyArgs} args - Arguments to filter Sections to delete.
     * @example
     * // Delete a few Sections
     * const { count } = await prisma.sections.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends SectionsDeleteManyArgs>(
      args?: SelectSubset<T, SectionsDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Sections.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SectionsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Sections
     * const sections = await prisma.sections.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends SectionsUpdateManyArgs>(
      args: SelectSubset<T, SectionsUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Sections.
     * @param {SectionsUpsertArgs} args - Arguments to update or create a Sections.
     * @example
     * // Update or create a Sections
     * const sections = await prisma.sections.upsert({
     *   create: {
     *     // ... data to create a Sections
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Sections we want to update
     *   }
     * })
    **/
    upsert<T extends SectionsUpsertArgs>(
      args: SelectSubset<T, SectionsUpsertArgs>
    ): CheckSelect<T, Prisma__SectionsClient<Sections>, Prisma__SectionsClient<SectionsGetPayload<T>>>

    /**
     * Count the number of Sections.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SectionsCountArgs} args - Arguments to filter Sections to count.
     * @example
     * // Count the number of Sections
     * const count = await prisma.sections.count({
     *   where: {
     *     // ... the filter for the Sections we want to count
     *   }
     * })
    **/
    count<T extends SectionsCountArgs>(
      args?: Subset<T, SectionsCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SectionsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Sections.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SectionsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SectionsAggregateArgs>(args: Subset<T, SectionsAggregateArgs>): PrismaPromise<GetSectionsAggregateType<T>>

    /**
     * Group by Sections.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SectionsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SectionsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SectionsGroupByArgs['orderBy'] }
        : { orderBy?: SectionsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SectionsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSectionsGroupByPayload<T> : PrismaPromise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for Sections.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__SectionsClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    profile<T extends ProfileArgs = {}>(args?: Subset<T, ProfileArgs>): CheckSelect<T, Prisma__ProfileClient<Profile | null >, Prisma__ProfileClient<ProfileGetPayload<T> | null >>;

    components<T extends SectionsComponentsFindManyArgs = {}>(args?: Subset<T, SectionsComponentsFindManyArgs>): CheckSelect<T, PrismaPromise<Array<SectionsComponents>>, PrismaPromise<Array<SectionsComponentsGetPayload<T>>>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * Sections findUnique
   */
  export type SectionsFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the Sections
     * 
    **/
    select?: SectionsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: SectionsInclude | null
    /**
     * Throw an Error if a Sections can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Sections to fetch.
     * 
    **/
    where: SectionsWhereUniqueInput
  }


  /**
   * Sections findFirst
   */
  export type SectionsFindFirstArgs = {
    /**
     * Select specific fields to fetch from the Sections
     * 
    **/
    select?: SectionsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: SectionsInclude | null
    /**
     * Throw an Error if a Sections can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Sections to fetch.
     * 
    **/
    where?: SectionsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sections to fetch.
     * 
    **/
    orderBy?: Enumerable<SectionsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Sections.
     * 
    **/
    cursor?: SectionsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sections from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sections.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Sections.
     * 
    **/
    distinct?: Enumerable<SectionsScalarFieldEnum>
  }


  /**
   * Sections findMany
   */
  export type SectionsFindManyArgs = {
    /**
     * Select specific fields to fetch from the Sections
     * 
    **/
    select?: SectionsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: SectionsInclude | null
    /**
     * Filter, which Sections to fetch.
     * 
    **/
    where?: SectionsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sections to fetch.
     * 
    **/
    orderBy?: Enumerable<SectionsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Sections.
     * 
    **/
    cursor?: SectionsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sections from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sections.
     * 
    **/
    skip?: number
    distinct?: Enumerable<SectionsScalarFieldEnum>
  }


  /**
   * Sections create
   */
  export type SectionsCreateArgs = {
    /**
     * Select specific fields to fetch from the Sections
     * 
    **/
    select?: SectionsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: SectionsInclude | null
    /**
     * The data needed to create a Sections.
     * 
    **/
    data: XOR<SectionsCreateInput, SectionsUncheckedCreateInput>
  }


  /**
   * Sections createMany
   */
  export type SectionsCreateManyArgs = {
    /**
     * The data used to create many Sections.
     * 
    **/
    data: Enumerable<SectionsCreateManyInput>
  }


  /**
   * Sections update
   */
  export type SectionsUpdateArgs = {
    /**
     * Select specific fields to fetch from the Sections
     * 
    **/
    select?: SectionsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: SectionsInclude | null
    /**
     * The data needed to update a Sections.
     * 
    **/
    data: XOR<SectionsUpdateInput, SectionsUncheckedUpdateInput>
    /**
     * Choose, which Sections to update.
     * 
    **/
    where: SectionsWhereUniqueInput
  }


  /**
   * Sections updateMany
   */
  export type SectionsUpdateManyArgs = {
    /**
     * The data used to update Sections.
     * 
    **/
    data: XOR<SectionsUpdateManyMutationInput, SectionsUncheckedUpdateManyInput>
    /**
     * Filter which Sections to update
     * 
    **/
    where?: SectionsWhereInput
  }


  /**
   * Sections upsert
   */
  export type SectionsUpsertArgs = {
    /**
     * Select specific fields to fetch from the Sections
     * 
    **/
    select?: SectionsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: SectionsInclude | null
    /**
     * The filter to search for the Sections to update in case it exists.
     * 
    **/
    where: SectionsWhereUniqueInput
    /**
     * In case the Sections found by the `where` argument doesn't exist, create a new Sections with this data.
     * 
    **/
    create: XOR<SectionsCreateInput, SectionsUncheckedCreateInput>
    /**
     * In case the Sections was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<SectionsUpdateInput, SectionsUncheckedUpdateInput>
  }


  /**
   * Sections delete
   */
  export type SectionsDeleteArgs = {
    /**
     * Select specific fields to fetch from the Sections
     * 
    **/
    select?: SectionsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: SectionsInclude | null
    /**
     * Filter which Sections to delete.
     * 
    **/
    where: SectionsWhereUniqueInput
  }


  /**
   * Sections deleteMany
   */
  export type SectionsDeleteManyArgs = {
    /**
     * Filter which Sections to delete
     * 
    **/
    where?: SectionsWhereInput
  }


  /**
   * Sections without action
   */
  export type SectionsArgs = {
    /**
     * Select specific fields to fetch from the Sections
     * 
    **/
    select?: SectionsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: SectionsInclude | null
  }



  /**
   * Model SectionsComponents
   */


  export type AggregateSectionsComponents = {
    _count: SectionsComponentsCountAggregateOutputType | null
    _avg: SectionsComponentsAvgAggregateOutputType | null
    _sum: SectionsComponentsSumAggregateOutputType | null
    _min: SectionsComponentsMinAggregateOutputType | null
    _max: SectionsComponentsMaxAggregateOutputType | null
  }

  export type SectionsComponentsAvgAggregateOutputType = {
    value: number | null
  }

  export type SectionsComponentsSumAggregateOutputType = {
    value: number | null
  }

  export type SectionsComponentsMinAggregateOutputType = {
    id: string | null
    section_id: string | null
    type: string | null
    title: string | null
    value: number | null
    description: string | null
  }

  export type SectionsComponentsMaxAggregateOutputType = {
    id: string | null
    section_id: string | null
    type: string | null
    title: string | null
    value: number | null
    description: string | null
  }

  export type SectionsComponentsCountAggregateOutputType = {
    id: number
    section_id: number
    type: number
    title: number
    value: number
    description: number
    _all: number
  }


  export type SectionsComponentsAvgAggregateInputType = {
    value?: true
  }

  export type SectionsComponentsSumAggregateInputType = {
    value?: true
  }

  export type SectionsComponentsMinAggregateInputType = {
    id?: true
    section_id?: true
    type?: true
    title?: true
    value?: true
    description?: true
  }

  export type SectionsComponentsMaxAggregateInputType = {
    id?: true
    section_id?: true
    type?: true
    title?: true
    value?: true
    description?: true
  }

  export type SectionsComponentsCountAggregateInputType = {
    id?: true
    section_id?: true
    type?: true
    title?: true
    value?: true
    description?: true
    _all?: true
  }

  export type SectionsComponentsAggregateArgs = {
    /**
     * Filter which SectionsComponents to aggregate.
     * 
    **/
    where?: SectionsComponentsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SectionsComponents to fetch.
     * 
    **/
    orderBy?: Enumerable<SectionsComponentsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: SectionsComponentsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SectionsComponents from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SectionsComponents.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned SectionsComponents
    **/
    _count?: true | SectionsComponentsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: SectionsComponentsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: SectionsComponentsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SectionsComponentsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SectionsComponentsMaxAggregateInputType
  }

  export type GetSectionsComponentsAggregateType<T extends SectionsComponentsAggregateArgs> = {
        [P in keyof T & keyof AggregateSectionsComponents]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSectionsComponents[P]>
      : GetScalarType<T[P], AggregateSectionsComponents[P]>
  }




  export type SectionsComponentsGroupByArgs = {
    where?: SectionsComponentsWhereInput
    orderBy?: Enumerable<SectionsComponentsOrderByWithAggregationInput>
    by: Array<SectionsComponentsScalarFieldEnum>
    having?: SectionsComponentsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SectionsComponentsCountAggregateInputType | true
    _avg?: SectionsComponentsAvgAggregateInputType
    _sum?: SectionsComponentsSumAggregateInputType
    _min?: SectionsComponentsMinAggregateInputType
    _max?: SectionsComponentsMaxAggregateInputType
  }


  export type SectionsComponentsGroupByOutputType = {
    id: string
    section_id: string
    type: string
    title: string
    value: number | null
    description: string
    _count: SectionsComponentsCountAggregateOutputType | null
    _avg: SectionsComponentsAvgAggregateOutputType | null
    _sum: SectionsComponentsSumAggregateOutputType | null
    _min: SectionsComponentsMinAggregateOutputType | null
    _max: SectionsComponentsMaxAggregateOutputType | null
  }

  type GetSectionsComponentsGroupByPayload<T extends SectionsComponentsGroupByArgs> = PrismaPromise<
    Array<
      PickArray<SectionsComponentsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SectionsComponentsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SectionsComponentsGroupByOutputType[P]>
            : GetScalarType<T[P], SectionsComponentsGroupByOutputType[P]>
        }
      >
    >


  export type SectionsComponentsSelect = {
    id?: boolean
    section_id?: boolean
    type?: boolean
    title?: boolean
    value?: boolean
    description?: boolean
    section?: boolean | SectionsArgs
    items?: boolean | ComponentItemsFindManyArgs
    _count?: boolean | SectionsComponentsCountOutputTypeArgs
  }

  export type SectionsComponentsInclude = {
    section?: boolean | SectionsArgs
    items?: boolean | ComponentItemsFindManyArgs
    _count?: boolean | SectionsComponentsCountOutputTypeArgs
  }

  export type SectionsComponentsGetPayload<
    S extends boolean | null | undefined | SectionsComponentsArgs,
    U = keyof S
      > = S extends true
        ? SectionsComponents
    : S extends undefined
    ? never
    : S extends SectionsComponentsArgs | SectionsComponentsFindManyArgs
    ?'include' extends U
    ? SectionsComponents  & {
    [P in TrueKeys<S['include']>]:
        P extends 'section' ? SectionsGetPayload<S['include'][P]> :
        P extends 'items' ? Array < ComponentItemsGetPayload<S['include'][P]>>  :
        P extends '_count' ? SectionsComponentsCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'section' ? SectionsGetPayload<S['select'][P]> :
        P extends 'items' ? Array < ComponentItemsGetPayload<S['select'][P]>>  :
        P extends '_count' ? SectionsComponentsCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof SectionsComponents ? SectionsComponents[P] : never
  } 
    : SectionsComponents
  : SectionsComponents


  type SectionsComponentsCountArgs = Merge<
    Omit<SectionsComponentsFindManyArgs, 'select' | 'include'> & {
      select?: SectionsComponentsCountAggregateInputType | true
    }
  >

  export interface SectionsComponentsDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one SectionsComponents that matches the filter.
     * @param {SectionsComponentsFindUniqueArgs} args - Arguments to find a SectionsComponents
     * @example
     * // Get one SectionsComponents
     * const sectionsComponents = await prisma.sectionsComponents.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends SectionsComponentsFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, SectionsComponentsFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'SectionsComponents'> extends True ? CheckSelect<T, Prisma__SectionsComponentsClient<SectionsComponents>, Prisma__SectionsComponentsClient<SectionsComponentsGetPayload<T>>> : CheckSelect<T, Prisma__SectionsComponentsClient<SectionsComponents | null >, Prisma__SectionsComponentsClient<SectionsComponentsGetPayload<T> | null >>

    /**
     * Find the first SectionsComponents that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SectionsComponentsFindFirstArgs} args - Arguments to find a SectionsComponents
     * @example
     * // Get one SectionsComponents
     * const sectionsComponents = await prisma.sectionsComponents.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends SectionsComponentsFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, SectionsComponentsFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'SectionsComponents'> extends True ? CheckSelect<T, Prisma__SectionsComponentsClient<SectionsComponents>, Prisma__SectionsComponentsClient<SectionsComponentsGetPayload<T>>> : CheckSelect<T, Prisma__SectionsComponentsClient<SectionsComponents | null >, Prisma__SectionsComponentsClient<SectionsComponentsGetPayload<T> | null >>

    /**
     * Find zero or more SectionsComponents that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SectionsComponentsFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all SectionsComponents
     * const sectionsComponents = await prisma.sectionsComponents.findMany()
     * 
     * // Get first 10 SectionsComponents
     * const sectionsComponents = await prisma.sectionsComponents.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const sectionsComponentsWithIdOnly = await prisma.sectionsComponents.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends SectionsComponentsFindManyArgs>(
      args?: SelectSubset<T, SectionsComponentsFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<SectionsComponents>>, PrismaPromise<Array<SectionsComponentsGetPayload<T>>>>

    /**
     * Create a SectionsComponents.
     * @param {SectionsComponentsCreateArgs} args - Arguments to create a SectionsComponents.
     * @example
     * // Create one SectionsComponents
     * const SectionsComponents = await prisma.sectionsComponents.create({
     *   data: {
     *     // ... data to create a SectionsComponents
     *   }
     * })
     * 
    **/
    create<T extends SectionsComponentsCreateArgs>(
      args: SelectSubset<T, SectionsComponentsCreateArgs>
    ): CheckSelect<T, Prisma__SectionsComponentsClient<SectionsComponents>, Prisma__SectionsComponentsClient<SectionsComponentsGetPayload<T>>>

    /**
     * Create many SectionsComponents.
     *     @param {SectionsComponentsCreateManyArgs} args - Arguments to create many SectionsComponents.
     *     @example
     *     // Create many SectionsComponents
     *     const sectionsComponents = await prisma.sectionsComponents.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends SectionsComponentsCreateManyArgs>(
      args?: SelectSubset<T, SectionsComponentsCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a SectionsComponents.
     * @param {SectionsComponentsDeleteArgs} args - Arguments to delete one SectionsComponents.
     * @example
     * // Delete one SectionsComponents
     * const SectionsComponents = await prisma.sectionsComponents.delete({
     *   where: {
     *     // ... filter to delete one SectionsComponents
     *   }
     * })
     * 
    **/
    delete<T extends SectionsComponentsDeleteArgs>(
      args: SelectSubset<T, SectionsComponentsDeleteArgs>
    ): CheckSelect<T, Prisma__SectionsComponentsClient<SectionsComponents>, Prisma__SectionsComponentsClient<SectionsComponentsGetPayload<T>>>

    /**
     * Update one SectionsComponents.
     * @param {SectionsComponentsUpdateArgs} args - Arguments to update one SectionsComponents.
     * @example
     * // Update one SectionsComponents
     * const sectionsComponents = await prisma.sectionsComponents.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends SectionsComponentsUpdateArgs>(
      args: SelectSubset<T, SectionsComponentsUpdateArgs>
    ): CheckSelect<T, Prisma__SectionsComponentsClient<SectionsComponents>, Prisma__SectionsComponentsClient<SectionsComponentsGetPayload<T>>>

    /**
     * Delete zero or more SectionsComponents.
     * @param {SectionsComponentsDeleteManyArgs} args - Arguments to filter SectionsComponents to delete.
     * @example
     * // Delete a few SectionsComponents
     * const { count } = await prisma.sectionsComponents.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends SectionsComponentsDeleteManyArgs>(
      args?: SelectSubset<T, SectionsComponentsDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more SectionsComponents.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SectionsComponentsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many SectionsComponents
     * const sectionsComponents = await prisma.sectionsComponents.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends SectionsComponentsUpdateManyArgs>(
      args: SelectSubset<T, SectionsComponentsUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one SectionsComponents.
     * @param {SectionsComponentsUpsertArgs} args - Arguments to update or create a SectionsComponents.
     * @example
     * // Update or create a SectionsComponents
     * const sectionsComponents = await prisma.sectionsComponents.upsert({
     *   create: {
     *     // ... data to create a SectionsComponents
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the SectionsComponents we want to update
     *   }
     * })
    **/
    upsert<T extends SectionsComponentsUpsertArgs>(
      args: SelectSubset<T, SectionsComponentsUpsertArgs>
    ): CheckSelect<T, Prisma__SectionsComponentsClient<SectionsComponents>, Prisma__SectionsComponentsClient<SectionsComponentsGetPayload<T>>>

    /**
     * Count the number of SectionsComponents.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SectionsComponentsCountArgs} args - Arguments to filter SectionsComponents to count.
     * @example
     * // Count the number of SectionsComponents
     * const count = await prisma.sectionsComponents.count({
     *   where: {
     *     // ... the filter for the SectionsComponents we want to count
     *   }
     * })
    **/
    count<T extends SectionsComponentsCountArgs>(
      args?: Subset<T, SectionsComponentsCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SectionsComponentsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a SectionsComponents.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SectionsComponentsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SectionsComponentsAggregateArgs>(args: Subset<T, SectionsComponentsAggregateArgs>): PrismaPromise<GetSectionsComponentsAggregateType<T>>

    /**
     * Group by SectionsComponents.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SectionsComponentsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SectionsComponentsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SectionsComponentsGroupByArgs['orderBy'] }
        : { orderBy?: SectionsComponentsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SectionsComponentsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSectionsComponentsGroupByPayload<T> : PrismaPromise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for SectionsComponents.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__SectionsComponentsClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    section<T extends SectionsArgs = {}>(args?: Subset<T, SectionsArgs>): CheckSelect<T, Prisma__SectionsClient<Sections | null >, Prisma__SectionsClient<SectionsGetPayload<T> | null >>;

    items<T extends ComponentItemsFindManyArgs = {}>(args?: Subset<T, ComponentItemsFindManyArgs>): CheckSelect<T, PrismaPromise<Array<ComponentItems>>, PrismaPromise<Array<ComponentItemsGetPayload<T>>>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * SectionsComponents findUnique
   */
  export type SectionsComponentsFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the SectionsComponents
     * 
    **/
    select?: SectionsComponentsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: SectionsComponentsInclude | null
    /**
     * Throw an Error if a SectionsComponents can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which SectionsComponents to fetch.
     * 
    **/
    where: SectionsComponentsWhereUniqueInput
  }


  /**
   * SectionsComponents findFirst
   */
  export type SectionsComponentsFindFirstArgs = {
    /**
     * Select specific fields to fetch from the SectionsComponents
     * 
    **/
    select?: SectionsComponentsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: SectionsComponentsInclude | null
    /**
     * Throw an Error if a SectionsComponents can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which SectionsComponents to fetch.
     * 
    **/
    where?: SectionsComponentsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SectionsComponents to fetch.
     * 
    **/
    orderBy?: Enumerable<SectionsComponentsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SectionsComponents.
     * 
    **/
    cursor?: SectionsComponentsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SectionsComponents from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SectionsComponents.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SectionsComponents.
     * 
    **/
    distinct?: Enumerable<SectionsComponentsScalarFieldEnum>
  }


  /**
   * SectionsComponents findMany
   */
  export type SectionsComponentsFindManyArgs = {
    /**
     * Select specific fields to fetch from the SectionsComponents
     * 
    **/
    select?: SectionsComponentsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: SectionsComponentsInclude | null
    /**
     * Filter, which SectionsComponents to fetch.
     * 
    **/
    where?: SectionsComponentsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SectionsComponents to fetch.
     * 
    **/
    orderBy?: Enumerable<SectionsComponentsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing SectionsComponents.
     * 
    **/
    cursor?: SectionsComponentsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SectionsComponents from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SectionsComponents.
     * 
    **/
    skip?: number
    distinct?: Enumerable<SectionsComponentsScalarFieldEnum>
  }


  /**
   * SectionsComponents create
   */
  export type SectionsComponentsCreateArgs = {
    /**
     * Select specific fields to fetch from the SectionsComponents
     * 
    **/
    select?: SectionsComponentsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: SectionsComponentsInclude | null
    /**
     * The data needed to create a SectionsComponents.
     * 
    **/
    data: XOR<SectionsComponentsCreateInput, SectionsComponentsUncheckedCreateInput>
  }


  /**
   * SectionsComponents createMany
   */
  export type SectionsComponentsCreateManyArgs = {
    /**
     * The data used to create many SectionsComponents.
     * 
    **/
    data: Enumerable<SectionsComponentsCreateManyInput>
  }


  /**
   * SectionsComponents update
   */
  export type SectionsComponentsUpdateArgs = {
    /**
     * Select specific fields to fetch from the SectionsComponents
     * 
    **/
    select?: SectionsComponentsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: SectionsComponentsInclude | null
    /**
     * The data needed to update a SectionsComponents.
     * 
    **/
    data: XOR<SectionsComponentsUpdateInput, SectionsComponentsUncheckedUpdateInput>
    /**
     * Choose, which SectionsComponents to update.
     * 
    **/
    where: SectionsComponentsWhereUniqueInput
  }


  /**
   * SectionsComponents updateMany
   */
  export type SectionsComponentsUpdateManyArgs = {
    /**
     * The data used to update SectionsComponents.
     * 
    **/
    data: XOR<SectionsComponentsUpdateManyMutationInput, SectionsComponentsUncheckedUpdateManyInput>
    /**
     * Filter which SectionsComponents to update
     * 
    **/
    where?: SectionsComponentsWhereInput
  }


  /**
   * SectionsComponents upsert
   */
  export type SectionsComponentsUpsertArgs = {
    /**
     * Select specific fields to fetch from the SectionsComponents
     * 
    **/
    select?: SectionsComponentsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: SectionsComponentsInclude | null
    /**
     * The filter to search for the SectionsComponents to update in case it exists.
     * 
    **/
    where: SectionsComponentsWhereUniqueInput
    /**
     * In case the SectionsComponents found by the `where` argument doesn't exist, create a new SectionsComponents with this data.
     * 
    **/
    create: XOR<SectionsComponentsCreateInput, SectionsComponentsUncheckedCreateInput>
    /**
     * In case the SectionsComponents was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<SectionsComponentsUpdateInput, SectionsComponentsUncheckedUpdateInput>
  }


  /**
   * SectionsComponents delete
   */
  export type SectionsComponentsDeleteArgs = {
    /**
     * Select specific fields to fetch from the SectionsComponents
     * 
    **/
    select?: SectionsComponentsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: SectionsComponentsInclude | null
    /**
     * Filter which SectionsComponents to delete.
     * 
    **/
    where: SectionsComponentsWhereUniqueInput
  }


  /**
   * SectionsComponents deleteMany
   */
  export type SectionsComponentsDeleteManyArgs = {
    /**
     * Filter which SectionsComponents to delete
     * 
    **/
    where?: SectionsComponentsWhereInput
  }


  /**
   * SectionsComponents without action
   */
  export type SectionsComponentsArgs = {
    /**
     * Select specific fields to fetch from the SectionsComponents
     * 
    **/
    select?: SectionsComponentsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: SectionsComponentsInclude | null
  }



  /**
   * Model ComponentItems
   */


  export type AggregateComponentItems = {
    _count: ComponentItemsCountAggregateOutputType | null
    _avg: ComponentItemsAvgAggregateOutputType | null
    _sum: ComponentItemsSumAggregateOutputType | null
    _min: ComponentItemsMinAggregateOutputType | null
    _max: ComponentItemsMaxAggregateOutputType | null
  }

  export type ComponentItemsAvgAggregateOutputType = {
    value: number | null
  }

  export type ComponentItemsSumAggregateOutputType = {
    value: number | null
  }

  export type ComponentItemsMinAggregateOutputType = {
    id: string | null
    component_id: string | null
    type: string | null
    title: string | null
    value: number | null
    description: string | null
    icon: string | null
    path: string | null
  }

  export type ComponentItemsMaxAggregateOutputType = {
    id: string | null
    component_id: string | null
    type: string | null
    title: string | null
    value: number | null
    description: string | null
    icon: string | null
    path: string | null
  }

  export type ComponentItemsCountAggregateOutputType = {
    id: number
    component_id: number
    type: number
    title: number
    value: number
    description: number
    icon: number
    path: number
    _all: number
  }


  export type ComponentItemsAvgAggregateInputType = {
    value?: true
  }

  export type ComponentItemsSumAggregateInputType = {
    value?: true
  }

  export type ComponentItemsMinAggregateInputType = {
    id?: true
    component_id?: true
    type?: true
    title?: true
    value?: true
    description?: true
    icon?: true
    path?: true
  }

  export type ComponentItemsMaxAggregateInputType = {
    id?: true
    component_id?: true
    type?: true
    title?: true
    value?: true
    description?: true
    icon?: true
    path?: true
  }

  export type ComponentItemsCountAggregateInputType = {
    id?: true
    component_id?: true
    type?: true
    title?: true
    value?: true
    description?: true
    icon?: true
    path?: true
    _all?: true
  }

  export type ComponentItemsAggregateArgs = {
    /**
     * Filter which ComponentItems to aggregate.
     * 
    **/
    where?: ComponentItemsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ComponentItems to fetch.
     * 
    **/
    orderBy?: Enumerable<ComponentItemsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: ComponentItemsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ComponentItems from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ComponentItems.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ComponentItems
    **/
    _count?: true | ComponentItemsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ComponentItemsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ComponentItemsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ComponentItemsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ComponentItemsMaxAggregateInputType
  }

  export type GetComponentItemsAggregateType<T extends ComponentItemsAggregateArgs> = {
        [P in keyof T & keyof AggregateComponentItems]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateComponentItems[P]>
      : GetScalarType<T[P], AggregateComponentItems[P]>
  }




  export type ComponentItemsGroupByArgs = {
    where?: ComponentItemsWhereInput
    orderBy?: Enumerable<ComponentItemsOrderByWithAggregationInput>
    by: Array<ComponentItemsScalarFieldEnum>
    having?: ComponentItemsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ComponentItemsCountAggregateInputType | true
    _avg?: ComponentItemsAvgAggregateInputType
    _sum?: ComponentItemsSumAggregateInputType
    _min?: ComponentItemsMinAggregateInputType
    _max?: ComponentItemsMaxAggregateInputType
  }


  export type ComponentItemsGroupByOutputType = {
    id: string
    component_id: string
    type: string
    title: string
    value: number | null
    description: string
    icon: string | null
    path: string | null
    _count: ComponentItemsCountAggregateOutputType | null
    _avg: ComponentItemsAvgAggregateOutputType | null
    _sum: ComponentItemsSumAggregateOutputType | null
    _min: ComponentItemsMinAggregateOutputType | null
    _max: ComponentItemsMaxAggregateOutputType | null
  }

  type GetComponentItemsGroupByPayload<T extends ComponentItemsGroupByArgs> = PrismaPromise<
    Array<
      PickArray<ComponentItemsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ComponentItemsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ComponentItemsGroupByOutputType[P]>
            : GetScalarType<T[P], ComponentItemsGroupByOutputType[P]>
        }
      >
    >


  export type ComponentItemsSelect = {
    id?: boolean
    component_id?: boolean
    type?: boolean
    title?: boolean
    value?: boolean
    description?: boolean
    icon?: boolean
    path?: boolean
    component?: boolean | SectionsComponentsArgs
  }

  export type ComponentItemsInclude = {
    component?: boolean | SectionsComponentsArgs
  }

  export type ComponentItemsGetPayload<
    S extends boolean | null | undefined | ComponentItemsArgs,
    U = keyof S
      > = S extends true
        ? ComponentItems
    : S extends undefined
    ? never
    : S extends ComponentItemsArgs | ComponentItemsFindManyArgs
    ?'include' extends U
    ? ComponentItems  & {
    [P in TrueKeys<S['include']>]:
        P extends 'component' ? SectionsComponentsGetPayload<S['include'][P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'component' ? SectionsComponentsGetPayload<S['select'][P]> :  P extends keyof ComponentItems ? ComponentItems[P] : never
  } 
    : ComponentItems
  : ComponentItems


  type ComponentItemsCountArgs = Merge<
    Omit<ComponentItemsFindManyArgs, 'select' | 'include'> & {
      select?: ComponentItemsCountAggregateInputType | true
    }
  >

  export interface ComponentItemsDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one ComponentItems that matches the filter.
     * @param {ComponentItemsFindUniqueArgs} args - Arguments to find a ComponentItems
     * @example
     * // Get one ComponentItems
     * const componentItems = await prisma.componentItems.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ComponentItemsFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, ComponentItemsFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'ComponentItems'> extends True ? CheckSelect<T, Prisma__ComponentItemsClient<ComponentItems>, Prisma__ComponentItemsClient<ComponentItemsGetPayload<T>>> : CheckSelect<T, Prisma__ComponentItemsClient<ComponentItems | null >, Prisma__ComponentItemsClient<ComponentItemsGetPayload<T> | null >>

    /**
     * Find the first ComponentItems that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ComponentItemsFindFirstArgs} args - Arguments to find a ComponentItems
     * @example
     * // Get one ComponentItems
     * const componentItems = await prisma.componentItems.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ComponentItemsFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, ComponentItemsFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'ComponentItems'> extends True ? CheckSelect<T, Prisma__ComponentItemsClient<ComponentItems>, Prisma__ComponentItemsClient<ComponentItemsGetPayload<T>>> : CheckSelect<T, Prisma__ComponentItemsClient<ComponentItems | null >, Prisma__ComponentItemsClient<ComponentItemsGetPayload<T> | null >>

    /**
     * Find zero or more ComponentItems that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ComponentItemsFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ComponentItems
     * const componentItems = await prisma.componentItems.findMany()
     * 
     * // Get first 10 ComponentItems
     * const componentItems = await prisma.componentItems.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const componentItemsWithIdOnly = await prisma.componentItems.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends ComponentItemsFindManyArgs>(
      args?: SelectSubset<T, ComponentItemsFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<ComponentItems>>, PrismaPromise<Array<ComponentItemsGetPayload<T>>>>

    /**
     * Create a ComponentItems.
     * @param {ComponentItemsCreateArgs} args - Arguments to create a ComponentItems.
     * @example
     * // Create one ComponentItems
     * const ComponentItems = await prisma.componentItems.create({
     *   data: {
     *     // ... data to create a ComponentItems
     *   }
     * })
     * 
    **/
    create<T extends ComponentItemsCreateArgs>(
      args: SelectSubset<T, ComponentItemsCreateArgs>
    ): CheckSelect<T, Prisma__ComponentItemsClient<ComponentItems>, Prisma__ComponentItemsClient<ComponentItemsGetPayload<T>>>

    /**
     * Create many ComponentItems.
     *     @param {ComponentItemsCreateManyArgs} args - Arguments to create many ComponentItems.
     *     @example
     *     // Create many ComponentItems
     *     const componentItems = await prisma.componentItems.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends ComponentItemsCreateManyArgs>(
      args?: SelectSubset<T, ComponentItemsCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a ComponentItems.
     * @param {ComponentItemsDeleteArgs} args - Arguments to delete one ComponentItems.
     * @example
     * // Delete one ComponentItems
     * const ComponentItems = await prisma.componentItems.delete({
     *   where: {
     *     // ... filter to delete one ComponentItems
     *   }
     * })
     * 
    **/
    delete<T extends ComponentItemsDeleteArgs>(
      args: SelectSubset<T, ComponentItemsDeleteArgs>
    ): CheckSelect<T, Prisma__ComponentItemsClient<ComponentItems>, Prisma__ComponentItemsClient<ComponentItemsGetPayload<T>>>

    /**
     * Update one ComponentItems.
     * @param {ComponentItemsUpdateArgs} args - Arguments to update one ComponentItems.
     * @example
     * // Update one ComponentItems
     * const componentItems = await prisma.componentItems.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ComponentItemsUpdateArgs>(
      args: SelectSubset<T, ComponentItemsUpdateArgs>
    ): CheckSelect<T, Prisma__ComponentItemsClient<ComponentItems>, Prisma__ComponentItemsClient<ComponentItemsGetPayload<T>>>

    /**
     * Delete zero or more ComponentItems.
     * @param {ComponentItemsDeleteManyArgs} args - Arguments to filter ComponentItems to delete.
     * @example
     * // Delete a few ComponentItems
     * const { count } = await prisma.componentItems.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ComponentItemsDeleteManyArgs>(
      args?: SelectSubset<T, ComponentItemsDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more ComponentItems.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ComponentItemsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ComponentItems
     * const componentItems = await prisma.componentItems.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ComponentItemsUpdateManyArgs>(
      args: SelectSubset<T, ComponentItemsUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one ComponentItems.
     * @param {ComponentItemsUpsertArgs} args - Arguments to update or create a ComponentItems.
     * @example
     * // Update or create a ComponentItems
     * const componentItems = await prisma.componentItems.upsert({
     *   create: {
     *     // ... data to create a ComponentItems
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ComponentItems we want to update
     *   }
     * })
    **/
    upsert<T extends ComponentItemsUpsertArgs>(
      args: SelectSubset<T, ComponentItemsUpsertArgs>
    ): CheckSelect<T, Prisma__ComponentItemsClient<ComponentItems>, Prisma__ComponentItemsClient<ComponentItemsGetPayload<T>>>

    /**
     * Count the number of ComponentItems.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ComponentItemsCountArgs} args - Arguments to filter ComponentItems to count.
     * @example
     * // Count the number of ComponentItems
     * const count = await prisma.componentItems.count({
     *   where: {
     *     // ... the filter for the ComponentItems we want to count
     *   }
     * })
    **/
    count<T extends ComponentItemsCountArgs>(
      args?: Subset<T, ComponentItemsCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ComponentItemsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ComponentItems.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ComponentItemsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ComponentItemsAggregateArgs>(args: Subset<T, ComponentItemsAggregateArgs>): PrismaPromise<GetComponentItemsAggregateType<T>>

    /**
     * Group by ComponentItems.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ComponentItemsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ComponentItemsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ComponentItemsGroupByArgs['orderBy'] }
        : { orderBy?: ComponentItemsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ComponentItemsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetComponentItemsGroupByPayload<T> : PrismaPromise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for ComponentItems.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__ComponentItemsClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    component<T extends SectionsComponentsArgs = {}>(args?: Subset<T, SectionsComponentsArgs>): CheckSelect<T, Prisma__SectionsComponentsClient<SectionsComponents | null >, Prisma__SectionsComponentsClient<SectionsComponentsGetPayload<T> | null >>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * ComponentItems findUnique
   */
  export type ComponentItemsFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the ComponentItems
     * 
    **/
    select?: ComponentItemsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ComponentItemsInclude | null
    /**
     * Throw an Error if a ComponentItems can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which ComponentItems to fetch.
     * 
    **/
    where: ComponentItemsWhereUniqueInput
  }


  /**
   * ComponentItems findFirst
   */
  export type ComponentItemsFindFirstArgs = {
    /**
     * Select specific fields to fetch from the ComponentItems
     * 
    **/
    select?: ComponentItemsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ComponentItemsInclude | null
    /**
     * Throw an Error if a ComponentItems can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which ComponentItems to fetch.
     * 
    **/
    where?: ComponentItemsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ComponentItems to fetch.
     * 
    **/
    orderBy?: Enumerable<ComponentItemsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ComponentItems.
     * 
    **/
    cursor?: ComponentItemsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ComponentItems from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ComponentItems.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ComponentItems.
     * 
    **/
    distinct?: Enumerable<ComponentItemsScalarFieldEnum>
  }


  /**
   * ComponentItems findMany
   */
  export type ComponentItemsFindManyArgs = {
    /**
     * Select specific fields to fetch from the ComponentItems
     * 
    **/
    select?: ComponentItemsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ComponentItemsInclude | null
    /**
     * Filter, which ComponentItems to fetch.
     * 
    **/
    where?: ComponentItemsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ComponentItems to fetch.
     * 
    **/
    orderBy?: Enumerable<ComponentItemsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ComponentItems.
     * 
    **/
    cursor?: ComponentItemsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ComponentItems from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ComponentItems.
     * 
    **/
    skip?: number
    distinct?: Enumerable<ComponentItemsScalarFieldEnum>
  }


  /**
   * ComponentItems create
   */
  export type ComponentItemsCreateArgs = {
    /**
     * Select specific fields to fetch from the ComponentItems
     * 
    **/
    select?: ComponentItemsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ComponentItemsInclude | null
    /**
     * The data needed to create a ComponentItems.
     * 
    **/
    data: XOR<ComponentItemsCreateInput, ComponentItemsUncheckedCreateInput>
  }


  /**
   * ComponentItems createMany
   */
  export type ComponentItemsCreateManyArgs = {
    /**
     * The data used to create many ComponentItems.
     * 
    **/
    data: Enumerable<ComponentItemsCreateManyInput>
  }


  /**
   * ComponentItems update
   */
  export type ComponentItemsUpdateArgs = {
    /**
     * Select specific fields to fetch from the ComponentItems
     * 
    **/
    select?: ComponentItemsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ComponentItemsInclude | null
    /**
     * The data needed to update a ComponentItems.
     * 
    **/
    data: XOR<ComponentItemsUpdateInput, ComponentItemsUncheckedUpdateInput>
    /**
     * Choose, which ComponentItems to update.
     * 
    **/
    where: ComponentItemsWhereUniqueInput
  }


  /**
   * ComponentItems updateMany
   */
  export type ComponentItemsUpdateManyArgs = {
    /**
     * The data used to update ComponentItems.
     * 
    **/
    data: XOR<ComponentItemsUpdateManyMutationInput, ComponentItemsUncheckedUpdateManyInput>
    /**
     * Filter which ComponentItems to update
     * 
    **/
    where?: ComponentItemsWhereInput
  }


  /**
   * ComponentItems upsert
   */
  export type ComponentItemsUpsertArgs = {
    /**
     * Select specific fields to fetch from the ComponentItems
     * 
    **/
    select?: ComponentItemsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ComponentItemsInclude | null
    /**
     * The filter to search for the ComponentItems to update in case it exists.
     * 
    **/
    where: ComponentItemsWhereUniqueInput
    /**
     * In case the ComponentItems found by the `where` argument doesn't exist, create a new ComponentItems with this data.
     * 
    **/
    create: XOR<ComponentItemsCreateInput, ComponentItemsUncheckedCreateInput>
    /**
     * In case the ComponentItems was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<ComponentItemsUpdateInput, ComponentItemsUncheckedUpdateInput>
  }


  /**
   * ComponentItems delete
   */
  export type ComponentItemsDeleteArgs = {
    /**
     * Select specific fields to fetch from the ComponentItems
     * 
    **/
    select?: ComponentItemsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ComponentItemsInclude | null
    /**
     * Filter which ComponentItems to delete.
     * 
    **/
    where: ComponentItemsWhereUniqueInput
  }


  /**
   * ComponentItems deleteMany
   */
  export type ComponentItemsDeleteManyArgs = {
    /**
     * Filter which ComponentItems to delete
     * 
    **/
    where?: ComponentItemsWhereInput
  }


  /**
   * ComponentItems without action
   */
  export type ComponentItemsArgs = {
    /**
     * Select specific fields to fetch from the ComponentItems
     * 
    **/
    select?: ComponentItemsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ComponentItemsInclude | null
  }



  /**
   * Model AccountToken
   */


  export type AggregateAccountToken = {
    _count: AccountTokenCountAggregateOutputType | null
    _min: AccountTokenMinAggregateOutputType | null
    _max: AccountTokenMaxAggregateOutputType | null
  }

  export type AccountTokenMinAggregateOutputType = {
    id: string | null
    refresh_token: string | null
    account_id: string | null
    expires_date: Date | null
    created_at: Date | null
  }

  export type AccountTokenMaxAggregateOutputType = {
    id: string | null
    refresh_token: string | null
    account_id: string | null
    expires_date: Date | null
    created_at: Date | null
  }

  export type AccountTokenCountAggregateOutputType = {
    id: number
    refresh_token: number
    account_id: number
    expires_date: number
    created_at: number
    _all: number
  }


  export type AccountTokenMinAggregateInputType = {
    id?: true
    refresh_token?: true
    account_id?: true
    expires_date?: true
    created_at?: true
  }

  export type AccountTokenMaxAggregateInputType = {
    id?: true
    refresh_token?: true
    account_id?: true
    expires_date?: true
    created_at?: true
  }

  export type AccountTokenCountAggregateInputType = {
    id?: true
    refresh_token?: true
    account_id?: true
    expires_date?: true
    created_at?: true
    _all?: true
  }

  export type AccountTokenAggregateArgs = {
    /**
     * Filter which AccountToken to aggregate.
     * 
    **/
    where?: AccountTokenWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AccountTokens to fetch.
     * 
    **/
    orderBy?: Enumerable<AccountTokenOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: AccountTokenWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AccountTokens from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AccountTokens.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned AccountTokens
    **/
    _count?: true | AccountTokenCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AccountTokenMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AccountTokenMaxAggregateInputType
  }

  export type GetAccountTokenAggregateType<T extends AccountTokenAggregateArgs> = {
        [P in keyof T & keyof AggregateAccountToken]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAccountToken[P]>
      : GetScalarType<T[P], AggregateAccountToken[P]>
  }




  export type AccountTokenGroupByArgs = {
    where?: AccountTokenWhereInput
    orderBy?: Enumerable<AccountTokenOrderByWithAggregationInput>
    by: Array<AccountTokenScalarFieldEnum>
    having?: AccountTokenScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AccountTokenCountAggregateInputType | true
    _min?: AccountTokenMinAggregateInputType
    _max?: AccountTokenMaxAggregateInputType
  }


  export type AccountTokenGroupByOutputType = {
    id: string
    refresh_token: string
    account_id: string
    expires_date: Date
    created_at: Date
    _count: AccountTokenCountAggregateOutputType | null
    _min: AccountTokenMinAggregateOutputType | null
    _max: AccountTokenMaxAggregateOutputType | null
  }

  type GetAccountTokenGroupByPayload<T extends AccountTokenGroupByArgs> = PrismaPromise<
    Array<
      PickArray<AccountTokenGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AccountTokenGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AccountTokenGroupByOutputType[P]>
            : GetScalarType<T[P], AccountTokenGroupByOutputType[P]>
        }
      >
    >


  export type AccountTokenSelect = {
    id?: boolean
    refresh_token?: boolean
    account_id?: boolean
    expires_date?: boolean
    created_at?: boolean
    account_token?: boolean | AccountArgs
  }

  export type AccountTokenInclude = {
    account_token?: boolean | AccountArgs
  }

  export type AccountTokenGetPayload<
    S extends boolean | null | undefined | AccountTokenArgs,
    U = keyof S
      > = S extends true
        ? AccountToken
    : S extends undefined
    ? never
    : S extends AccountTokenArgs | AccountTokenFindManyArgs
    ?'include' extends U
    ? AccountToken  & {
    [P in TrueKeys<S['include']>]:
        P extends 'account_token' ? AccountGetPayload<S['include'][P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'account_token' ? AccountGetPayload<S['select'][P]> :  P extends keyof AccountToken ? AccountToken[P] : never
  } 
    : AccountToken
  : AccountToken


  type AccountTokenCountArgs = Merge<
    Omit<AccountTokenFindManyArgs, 'select' | 'include'> & {
      select?: AccountTokenCountAggregateInputType | true
    }
  >

  export interface AccountTokenDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one AccountToken that matches the filter.
     * @param {AccountTokenFindUniqueArgs} args - Arguments to find a AccountToken
     * @example
     * // Get one AccountToken
     * const accountToken = await prisma.accountToken.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends AccountTokenFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, AccountTokenFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'AccountToken'> extends True ? CheckSelect<T, Prisma__AccountTokenClient<AccountToken>, Prisma__AccountTokenClient<AccountTokenGetPayload<T>>> : CheckSelect<T, Prisma__AccountTokenClient<AccountToken | null >, Prisma__AccountTokenClient<AccountTokenGetPayload<T> | null >>

    /**
     * Find the first AccountToken that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountTokenFindFirstArgs} args - Arguments to find a AccountToken
     * @example
     * // Get one AccountToken
     * const accountToken = await prisma.accountToken.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends AccountTokenFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, AccountTokenFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'AccountToken'> extends True ? CheckSelect<T, Prisma__AccountTokenClient<AccountToken>, Prisma__AccountTokenClient<AccountTokenGetPayload<T>>> : CheckSelect<T, Prisma__AccountTokenClient<AccountToken | null >, Prisma__AccountTokenClient<AccountTokenGetPayload<T> | null >>

    /**
     * Find zero or more AccountTokens that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountTokenFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all AccountTokens
     * const accountTokens = await prisma.accountToken.findMany()
     * 
     * // Get first 10 AccountTokens
     * const accountTokens = await prisma.accountToken.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const accountTokenWithIdOnly = await prisma.accountToken.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends AccountTokenFindManyArgs>(
      args?: SelectSubset<T, AccountTokenFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<AccountToken>>, PrismaPromise<Array<AccountTokenGetPayload<T>>>>

    /**
     * Create a AccountToken.
     * @param {AccountTokenCreateArgs} args - Arguments to create a AccountToken.
     * @example
     * // Create one AccountToken
     * const AccountToken = await prisma.accountToken.create({
     *   data: {
     *     // ... data to create a AccountToken
     *   }
     * })
     * 
    **/
    create<T extends AccountTokenCreateArgs>(
      args: SelectSubset<T, AccountTokenCreateArgs>
    ): CheckSelect<T, Prisma__AccountTokenClient<AccountToken>, Prisma__AccountTokenClient<AccountTokenGetPayload<T>>>

    /**
     * Create many AccountTokens.
     *     @param {AccountTokenCreateManyArgs} args - Arguments to create many AccountTokens.
     *     @example
     *     // Create many AccountTokens
     *     const accountToken = await prisma.accountToken.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends AccountTokenCreateManyArgs>(
      args?: SelectSubset<T, AccountTokenCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a AccountToken.
     * @param {AccountTokenDeleteArgs} args - Arguments to delete one AccountToken.
     * @example
     * // Delete one AccountToken
     * const AccountToken = await prisma.accountToken.delete({
     *   where: {
     *     // ... filter to delete one AccountToken
     *   }
     * })
     * 
    **/
    delete<T extends AccountTokenDeleteArgs>(
      args: SelectSubset<T, AccountTokenDeleteArgs>
    ): CheckSelect<T, Prisma__AccountTokenClient<AccountToken>, Prisma__AccountTokenClient<AccountTokenGetPayload<T>>>

    /**
     * Update one AccountToken.
     * @param {AccountTokenUpdateArgs} args - Arguments to update one AccountToken.
     * @example
     * // Update one AccountToken
     * const accountToken = await prisma.accountToken.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends AccountTokenUpdateArgs>(
      args: SelectSubset<T, AccountTokenUpdateArgs>
    ): CheckSelect<T, Prisma__AccountTokenClient<AccountToken>, Prisma__AccountTokenClient<AccountTokenGetPayload<T>>>

    /**
     * Delete zero or more AccountTokens.
     * @param {AccountTokenDeleteManyArgs} args - Arguments to filter AccountTokens to delete.
     * @example
     * // Delete a few AccountTokens
     * const { count } = await prisma.accountToken.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends AccountTokenDeleteManyArgs>(
      args?: SelectSubset<T, AccountTokenDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more AccountTokens.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountTokenUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many AccountTokens
     * const accountToken = await prisma.accountToken.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends AccountTokenUpdateManyArgs>(
      args: SelectSubset<T, AccountTokenUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one AccountToken.
     * @param {AccountTokenUpsertArgs} args - Arguments to update or create a AccountToken.
     * @example
     * // Update or create a AccountToken
     * const accountToken = await prisma.accountToken.upsert({
     *   create: {
     *     // ... data to create a AccountToken
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the AccountToken we want to update
     *   }
     * })
    **/
    upsert<T extends AccountTokenUpsertArgs>(
      args: SelectSubset<T, AccountTokenUpsertArgs>
    ): CheckSelect<T, Prisma__AccountTokenClient<AccountToken>, Prisma__AccountTokenClient<AccountTokenGetPayload<T>>>

    /**
     * Count the number of AccountTokens.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountTokenCountArgs} args - Arguments to filter AccountTokens to count.
     * @example
     * // Count the number of AccountTokens
     * const count = await prisma.accountToken.count({
     *   where: {
     *     // ... the filter for the AccountTokens we want to count
     *   }
     * })
    **/
    count<T extends AccountTokenCountArgs>(
      args?: Subset<T, AccountTokenCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AccountTokenCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a AccountToken.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountTokenAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AccountTokenAggregateArgs>(args: Subset<T, AccountTokenAggregateArgs>): PrismaPromise<GetAccountTokenAggregateType<T>>

    /**
     * Group by AccountToken.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountTokenGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AccountTokenGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AccountTokenGroupByArgs['orderBy'] }
        : { orderBy?: AccountTokenGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AccountTokenGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAccountTokenGroupByPayload<T> : PrismaPromise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for AccountToken.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__AccountTokenClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    account_token<T extends AccountArgs = {}>(args?: Subset<T, AccountArgs>): CheckSelect<T, Prisma__AccountClient<Account | null >, Prisma__AccountClient<AccountGetPayload<T> | null >>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * AccountToken findUnique
   */
  export type AccountTokenFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the AccountToken
     * 
    **/
    select?: AccountTokenSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: AccountTokenInclude | null
    /**
     * Throw an Error if a AccountToken can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which AccountToken to fetch.
     * 
    **/
    where: AccountTokenWhereUniqueInput
  }


  /**
   * AccountToken findFirst
   */
  export type AccountTokenFindFirstArgs = {
    /**
     * Select specific fields to fetch from the AccountToken
     * 
    **/
    select?: AccountTokenSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: AccountTokenInclude | null
    /**
     * Throw an Error if a AccountToken can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which AccountToken to fetch.
     * 
    **/
    where?: AccountTokenWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AccountTokens to fetch.
     * 
    **/
    orderBy?: Enumerable<AccountTokenOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AccountTokens.
     * 
    **/
    cursor?: AccountTokenWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AccountTokens from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AccountTokens.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AccountTokens.
     * 
    **/
    distinct?: Enumerable<AccountTokenScalarFieldEnum>
  }


  /**
   * AccountToken findMany
   */
  export type AccountTokenFindManyArgs = {
    /**
     * Select specific fields to fetch from the AccountToken
     * 
    **/
    select?: AccountTokenSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: AccountTokenInclude | null
    /**
     * Filter, which AccountTokens to fetch.
     * 
    **/
    where?: AccountTokenWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AccountTokens to fetch.
     * 
    **/
    orderBy?: Enumerable<AccountTokenOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing AccountTokens.
     * 
    **/
    cursor?: AccountTokenWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AccountTokens from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AccountTokens.
     * 
    **/
    skip?: number
    distinct?: Enumerable<AccountTokenScalarFieldEnum>
  }


  /**
   * AccountToken create
   */
  export type AccountTokenCreateArgs = {
    /**
     * Select specific fields to fetch from the AccountToken
     * 
    **/
    select?: AccountTokenSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: AccountTokenInclude | null
    /**
     * The data needed to create a AccountToken.
     * 
    **/
    data: XOR<AccountTokenCreateInput, AccountTokenUncheckedCreateInput>
  }


  /**
   * AccountToken createMany
   */
  export type AccountTokenCreateManyArgs = {
    /**
     * The data used to create many AccountTokens.
     * 
    **/
    data: Enumerable<AccountTokenCreateManyInput>
  }


  /**
   * AccountToken update
   */
  export type AccountTokenUpdateArgs = {
    /**
     * Select specific fields to fetch from the AccountToken
     * 
    **/
    select?: AccountTokenSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: AccountTokenInclude | null
    /**
     * The data needed to update a AccountToken.
     * 
    **/
    data: XOR<AccountTokenUpdateInput, AccountTokenUncheckedUpdateInput>
    /**
     * Choose, which AccountToken to update.
     * 
    **/
    where: AccountTokenWhereUniqueInput
  }


  /**
   * AccountToken updateMany
   */
  export type AccountTokenUpdateManyArgs = {
    /**
     * The data used to update AccountTokens.
     * 
    **/
    data: XOR<AccountTokenUpdateManyMutationInput, AccountTokenUncheckedUpdateManyInput>
    /**
     * Filter which AccountTokens to update
     * 
    **/
    where?: AccountTokenWhereInput
  }


  /**
   * AccountToken upsert
   */
  export type AccountTokenUpsertArgs = {
    /**
     * Select specific fields to fetch from the AccountToken
     * 
    **/
    select?: AccountTokenSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: AccountTokenInclude | null
    /**
     * The filter to search for the AccountToken to update in case it exists.
     * 
    **/
    where: AccountTokenWhereUniqueInput
    /**
     * In case the AccountToken found by the `where` argument doesn't exist, create a new AccountToken with this data.
     * 
    **/
    create: XOR<AccountTokenCreateInput, AccountTokenUncheckedCreateInput>
    /**
     * In case the AccountToken was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<AccountTokenUpdateInput, AccountTokenUncheckedUpdateInput>
  }


  /**
   * AccountToken delete
   */
  export type AccountTokenDeleteArgs = {
    /**
     * Select specific fields to fetch from the AccountToken
     * 
    **/
    select?: AccountTokenSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: AccountTokenInclude | null
    /**
     * Filter which AccountToken to delete.
     * 
    **/
    where: AccountTokenWhereUniqueInput
  }


  /**
   * AccountToken deleteMany
   */
  export type AccountTokenDeleteManyArgs = {
    /**
     * Filter which AccountTokens to delete
     * 
    **/
    where?: AccountTokenWhereInput
  }


  /**
   * AccountToken without action
   */
  export type AccountTokenArgs = {
    /**
     * Select specific fields to fetch from the AccountToken
     * 
    **/
    select?: AccountTokenSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: AccountTokenInclude | null
  }



  /**
   * Enums
   */

  // Based on
  // https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275

  export const AccountScalarFieldEnum: {
    id: 'id',
    username: 'username',
    first_name: 'first_name',
    last_name: 'last_name',
    email: 'email',
    created_at: 'created_at',
    password: 'password',
    priv_level: 'priv_level'
  };

  export type AccountScalarFieldEnum = (typeof AccountScalarFieldEnum)[keyof typeof AccountScalarFieldEnum]


  export const ProfileScalarFieldEnum: {
    username: 'username',
    first_name: 'first_name',
    last_name: 'last_name',
    email: 'email',
    greeting: 'greeting',
    color: 'color',
    description: 'description',
    profile_picture: 'profile_picture',
    profile_cover: 'profile_cover',
    profile_animation: 'profile_animation',
    id: 'id'
  };

  export type ProfileScalarFieldEnum = (typeof ProfileScalarFieldEnum)[keyof typeof ProfileScalarFieldEnum]


  export const SectionsScalarFieldEnum: {
    id: 'id',
    username: 'username',
    title: 'title'
  };

  export type SectionsScalarFieldEnum = (typeof SectionsScalarFieldEnum)[keyof typeof SectionsScalarFieldEnum]


  export const SectionsComponentsScalarFieldEnum: {
    id: 'id',
    section_id: 'section_id',
    type: 'type',
    title: 'title',
    value: 'value',
    description: 'description'
  };

  export type SectionsComponentsScalarFieldEnum = (typeof SectionsComponentsScalarFieldEnum)[keyof typeof SectionsComponentsScalarFieldEnum]


  export const ComponentItemsScalarFieldEnum: {
    id: 'id',
    component_id: 'component_id',
    type: 'type',
    title: 'title',
    value: 'value',
    description: 'description',
    icon: 'icon',
    path: 'path'
  };

  export type ComponentItemsScalarFieldEnum = (typeof ComponentItemsScalarFieldEnum)[keyof typeof ComponentItemsScalarFieldEnum]


  export const AccountTokenScalarFieldEnum: {
    id: 'id',
    refresh_token: 'refresh_token',
    account_id: 'account_id',
    expires_date: 'expires_date',
    created_at: 'created_at'
  };

  export type AccountTokenScalarFieldEnum = (typeof AccountTokenScalarFieldEnum)[keyof typeof AccountTokenScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  /**
   * Deep Input Types
   */


  export type AccountWhereInput = {
    AND?: Enumerable<AccountWhereInput>
    OR?: Enumerable<AccountWhereInput>
    NOT?: Enumerable<AccountWhereInput>
    id?: StringFilter | string
    username?: StringFilter | string
    first_name?: StringNullableFilter | string | null
    last_name?: StringNullableFilter | string | null
    email?: StringFilter | string
    created_at?: DateTimeFilter | Date | string
    password?: StringFilter | string
    priv_level?: IntNullableFilter | number | null
    tokens?: AccountTokenListRelationFilter
    profile?: XOR<ProfileRelationFilter, ProfileWhereInput>
  }

  export type AccountOrderByWithRelationInput = {
    id?: SortOrder
    username?: SortOrder
    first_name?: SortOrder
    last_name?: SortOrder
    email?: SortOrder
    created_at?: SortOrder
    password?: SortOrder
    priv_level?: SortOrder
    tokens?: AccountTokenOrderByRelationAggregateInput
    profile?: ProfileOrderByWithRelationInput
  }

  export type AccountWhereUniqueInput = {
    id?: string
    username?: string
    email?: string
  }

  export type AccountOrderByWithAggregationInput = {
    id?: SortOrder
    username?: SortOrder
    first_name?: SortOrder
    last_name?: SortOrder
    email?: SortOrder
    created_at?: SortOrder
    password?: SortOrder
    priv_level?: SortOrder
    _count?: AccountCountOrderByAggregateInput
    _avg?: AccountAvgOrderByAggregateInput
    _max?: AccountMaxOrderByAggregateInput
    _min?: AccountMinOrderByAggregateInput
    _sum?: AccountSumOrderByAggregateInput
  }

  export type AccountScalarWhereWithAggregatesInput = {
    AND?: Enumerable<AccountScalarWhereWithAggregatesInput>
    OR?: Enumerable<AccountScalarWhereWithAggregatesInput>
    NOT?: Enumerable<AccountScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    username?: StringWithAggregatesFilter | string
    first_name?: StringNullableWithAggregatesFilter | string | null
    last_name?: StringNullableWithAggregatesFilter | string | null
    email?: StringWithAggregatesFilter | string
    created_at?: DateTimeWithAggregatesFilter | Date | string
    password?: StringWithAggregatesFilter | string
    priv_level?: IntNullableWithAggregatesFilter | number | null
  }

  export type ProfileWhereInput = {
    AND?: Enumerable<ProfileWhereInput>
    OR?: Enumerable<ProfileWhereInput>
    NOT?: Enumerable<ProfileWhereInput>
    username?: StringFilter | string
    first_name?: StringFilter | string
    last_name?: StringFilter | string
    email?: StringFilter | string
    greeting?: StringFilter | string
    color?: StringNullableFilter | string | null
    description?: StringFilter | string
    profile_picture?: StringNullableFilter | string | null
    profile_cover?: StringNullableFilter | string | null
    profile_animation?: StringNullableFilter | string | null
    id?: StringFilter | string
    account?: XOR<AccountRelationFilter, AccountWhereInput> | null
    sections?: SectionsListRelationFilter
  }

  export type ProfileOrderByWithRelationInput = {
    username?: SortOrder
    first_name?: SortOrder
    last_name?: SortOrder
    email?: SortOrder
    greeting?: SortOrder
    color?: SortOrder
    description?: SortOrder
    profile_picture?: SortOrder
    profile_cover?: SortOrder
    profile_animation?: SortOrder
    id?: SortOrder
    account?: AccountOrderByWithRelationInput
    sections?: SectionsOrderByRelationAggregateInput
  }

  export type ProfileWhereUniqueInput = {
    username?: string
  }

  export type ProfileOrderByWithAggregationInput = {
    username?: SortOrder
    first_name?: SortOrder
    last_name?: SortOrder
    email?: SortOrder
    greeting?: SortOrder
    color?: SortOrder
    description?: SortOrder
    profile_picture?: SortOrder
    profile_cover?: SortOrder
    profile_animation?: SortOrder
    id?: SortOrder
    _count?: ProfileCountOrderByAggregateInput
    _max?: ProfileMaxOrderByAggregateInput
    _min?: ProfileMinOrderByAggregateInput
  }

  export type ProfileScalarWhereWithAggregatesInput = {
    AND?: Enumerable<ProfileScalarWhereWithAggregatesInput>
    OR?: Enumerable<ProfileScalarWhereWithAggregatesInput>
    NOT?: Enumerable<ProfileScalarWhereWithAggregatesInput>
    username?: StringWithAggregatesFilter | string
    first_name?: StringWithAggregatesFilter | string
    last_name?: StringWithAggregatesFilter | string
    email?: StringWithAggregatesFilter | string
    greeting?: StringWithAggregatesFilter | string
    color?: StringNullableWithAggregatesFilter | string | null
    description?: StringWithAggregatesFilter | string
    profile_picture?: StringNullableWithAggregatesFilter | string | null
    profile_cover?: StringNullableWithAggregatesFilter | string | null
    profile_animation?: StringNullableWithAggregatesFilter | string | null
    id?: StringWithAggregatesFilter | string
  }

  export type SectionsWhereInput = {
    AND?: Enumerable<SectionsWhereInput>
    OR?: Enumerable<SectionsWhereInput>
    NOT?: Enumerable<SectionsWhereInput>
    id?: StringFilter | string
    username?: StringFilter | string
    title?: StringFilter | string
    profile?: XOR<ProfileRelationFilter, ProfileWhereInput>
    components?: SectionsComponentsListRelationFilter
  }

  export type SectionsOrderByWithRelationInput = {
    id?: SortOrder
    username?: SortOrder
    title?: SortOrder
    profile?: ProfileOrderByWithRelationInput
    components?: SectionsComponentsOrderByRelationAggregateInput
  }

  export type SectionsWhereUniqueInput = {
    id?: string
  }

  export type SectionsOrderByWithAggregationInput = {
    id?: SortOrder
    username?: SortOrder
    title?: SortOrder
    _count?: SectionsCountOrderByAggregateInput
    _max?: SectionsMaxOrderByAggregateInput
    _min?: SectionsMinOrderByAggregateInput
  }

  export type SectionsScalarWhereWithAggregatesInput = {
    AND?: Enumerable<SectionsScalarWhereWithAggregatesInput>
    OR?: Enumerable<SectionsScalarWhereWithAggregatesInput>
    NOT?: Enumerable<SectionsScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    username?: StringWithAggregatesFilter | string
    title?: StringWithAggregatesFilter | string
  }

  export type SectionsComponentsWhereInput = {
    AND?: Enumerable<SectionsComponentsWhereInput>
    OR?: Enumerable<SectionsComponentsWhereInput>
    NOT?: Enumerable<SectionsComponentsWhereInput>
    id?: StringFilter | string
    section_id?: StringFilter | string
    type?: StringFilter | string
    title?: StringFilter | string
    value?: IntNullableFilter | number | null
    description?: StringFilter | string
    section?: XOR<SectionsRelationFilter, SectionsWhereInput>
    items?: ComponentItemsListRelationFilter
  }

  export type SectionsComponentsOrderByWithRelationInput = {
    id?: SortOrder
    section_id?: SortOrder
    type?: SortOrder
    title?: SortOrder
    value?: SortOrder
    description?: SortOrder
    section?: SectionsOrderByWithRelationInput
    items?: ComponentItemsOrderByRelationAggregateInput
  }

  export type SectionsComponentsWhereUniqueInput = {
    id?: string
  }

  export type SectionsComponentsOrderByWithAggregationInput = {
    id?: SortOrder
    section_id?: SortOrder
    type?: SortOrder
    title?: SortOrder
    value?: SortOrder
    description?: SortOrder
    _count?: SectionsComponentsCountOrderByAggregateInput
    _avg?: SectionsComponentsAvgOrderByAggregateInput
    _max?: SectionsComponentsMaxOrderByAggregateInput
    _min?: SectionsComponentsMinOrderByAggregateInput
    _sum?: SectionsComponentsSumOrderByAggregateInput
  }

  export type SectionsComponentsScalarWhereWithAggregatesInput = {
    AND?: Enumerable<SectionsComponentsScalarWhereWithAggregatesInput>
    OR?: Enumerable<SectionsComponentsScalarWhereWithAggregatesInput>
    NOT?: Enumerable<SectionsComponentsScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    section_id?: StringWithAggregatesFilter | string
    type?: StringWithAggregatesFilter | string
    title?: StringWithAggregatesFilter | string
    value?: IntNullableWithAggregatesFilter | number | null
    description?: StringWithAggregatesFilter | string
  }

  export type ComponentItemsWhereInput = {
    AND?: Enumerable<ComponentItemsWhereInput>
    OR?: Enumerable<ComponentItemsWhereInput>
    NOT?: Enumerable<ComponentItemsWhereInput>
    id?: StringFilter | string
    component_id?: StringFilter | string
    type?: StringFilter | string
    title?: StringFilter | string
    value?: IntNullableFilter | number | null
    description?: StringFilter | string
    icon?: StringNullableFilter | string | null
    path?: StringNullableFilter | string | null
    component?: XOR<SectionsComponentsRelationFilter, SectionsComponentsWhereInput>
  }

  export type ComponentItemsOrderByWithRelationInput = {
    id?: SortOrder
    component_id?: SortOrder
    type?: SortOrder
    title?: SortOrder
    value?: SortOrder
    description?: SortOrder
    icon?: SortOrder
    path?: SortOrder
    component?: SectionsComponentsOrderByWithRelationInput
  }

  export type ComponentItemsWhereUniqueInput = {
    id?: string
  }

  export type ComponentItemsOrderByWithAggregationInput = {
    id?: SortOrder
    component_id?: SortOrder
    type?: SortOrder
    title?: SortOrder
    value?: SortOrder
    description?: SortOrder
    icon?: SortOrder
    path?: SortOrder
    _count?: ComponentItemsCountOrderByAggregateInput
    _avg?: ComponentItemsAvgOrderByAggregateInput
    _max?: ComponentItemsMaxOrderByAggregateInput
    _min?: ComponentItemsMinOrderByAggregateInput
    _sum?: ComponentItemsSumOrderByAggregateInput
  }

  export type ComponentItemsScalarWhereWithAggregatesInput = {
    AND?: Enumerable<ComponentItemsScalarWhereWithAggregatesInput>
    OR?: Enumerable<ComponentItemsScalarWhereWithAggregatesInput>
    NOT?: Enumerable<ComponentItemsScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    component_id?: StringWithAggregatesFilter | string
    type?: StringWithAggregatesFilter | string
    title?: StringWithAggregatesFilter | string
    value?: IntNullableWithAggregatesFilter | number | null
    description?: StringWithAggregatesFilter | string
    icon?: StringNullableWithAggregatesFilter | string | null
    path?: StringNullableWithAggregatesFilter | string | null
  }

  export type AccountTokenWhereInput = {
    AND?: Enumerable<AccountTokenWhereInput>
    OR?: Enumerable<AccountTokenWhereInput>
    NOT?: Enumerable<AccountTokenWhereInput>
    id?: StringFilter | string
    refresh_token?: StringFilter | string
    account_id?: StringFilter | string
    expires_date?: DateTimeFilter | Date | string
    created_at?: DateTimeFilter | Date | string
    account_token?: XOR<AccountRelationFilter, AccountWhereInput>
  }

  export type AccountTokenOrderByWithRelationInput = {
    id?: SortOrder
    refresh_token?: SortOrder
    account_id?: SortOrder
    expires_date?: SortOrder
    created_at?: SortOrder
    account_token?: AccountOrderByWithRelationInput
  }

  export type AccountTokenWhereUniqueInput = {
    id?: string
  }

  export type AccountTokenOrderByWithAggregationInput = {
    id?: SortOrder
    refresh_token?: SortOrder
    account_id?: SortOrder
    expires_date?: SortOrder
    created_at?: SortOrder
    _count?: AccountTokenCountOrderByAggregateInput
    _max?: AccountTokenMaxOrderByAggregateInput
    _min?: AccountTokenMinOrderByAggregateInput
  }

  export type AccountTokenScalarWhereWithAggregatesInput = {
    AND?: Enumerable<AccountTokenScalarWhereWithAggregatesInput>
    OR?: Enumerable<AccountTokenScalarWhereWithAggregatesInput>
    NOT?: Enumerable<AccountTokenScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    refresh_token?: StringWithAggregatesFilter | string
    account_id?: StringWithAggregatesFilter | string
    expires_date?: DateTimeWithAggregatesFilter | Date | string
    created_at?: DateTimeWithAggregatesFilter | Date | string
  }

  export type AccountCreateInput = {
    id?: string
    first_name?: string | null
    last_name?: string | null
    email: string
    created_at: Date | string
    password: string
    priv_level?: number | null
    tokens?: AccountTokenCreateNestedManyWithoutAccount_tokenInput
    profile: ProfileCreateNestedOneWithoutAccountInput
  }

  export type AccountUncheckedCreateInput = {
    id?: string
    username: string
    first_name?: string | null
    last_name?: string | null
    email: string
    created_at: Date | string
    password: string
    priv_level?: number | null
    tokens?: AccountTokenUncheckedCreateNestedManyWithoutAccount_tokenInput
  }

  export type AccountUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    first_name?: NullableStringFieldUpdateOperationsInput | string | null
    last_name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    password?: StringFieldUpdateOperationsInput | string
    priv_level?: NullableIntFieldUpdateOperationsInput | number | null
    tokens?: AccountTokenUpdateManyWithoutAccount_tokenInput
    profile?: ProfileUpdateOneRequiredWithoutAccountInput
  }

  export type AccountUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    first_name?: NullableStringFieldUpdateOperationsInput | string | null
    last_name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    password?: StringFieldUpdateOperationsInput | string
    priv_level?: NullableIntFieldUpdateOperationsInput | number | null
    tokens?: AccountTokenUncheckedUpdateManyWithoutAccount_tokenInput
  }

  export type AccountCreateManyInput = {
    id?: string
    username: string
    first_name?: string | null
    last_name?: string | null
    email: string
    created_at: Date | string
    password: string
    priv_level?: number | null
  }

  export type AccountUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    first_name?: NullableStringFieldUpdateOperationsInput | string | null
    last_name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    password?: StringFieldUpdateOperationsInput | string
    priv_level?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type AccountUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    first_name?: NullableStringFieldUpdateOperationsInput | string | null
    last_name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    password?: StringFieldUpdateOperationsInput | string
    priv_level?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type ProfileCreateInput = {
    username: string
    first_name: string
    last_name: string
    email: string
    greeting: string
    color?: string | null
    description: string
    profile_picture?: string | null
    profile_cover?: string | null
    profile_animation?: string | null
    id?: string
    account?: AccountCreateNestedOneWithoutProfileInput
    sections?: SectionsCreateNestedManyWithoutProfileInput
  }

  export type ProfileUncheckedCreateInput = {
    username: string
    first_name: string
    last_name: string
    email: string
    greeting: string
    color?: string | null
    description: string
    profile_picture?: string | null
    profile_cover?: string | null
    profile_animation?: string | null
    id?: string
    account?: AccountUncheckedCreateNestedOneWithoutProfileInput
    sections?: SectionsUncheckedCreateNestedManyWithoutProfileInput
  }

  export type ProfileUpdateInput = {
    username?: StringFieldUpdateOperationsInput | string
    first_name?: StringFieldUpdateOperationsInput | string
    last_name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    greeting?: StringFieldUpdateOperationsInput | string
    color?: NullableStringFieldUpdateOperationsInput | string | null
    description?: StringFieldUpdateOperationsInput | string
    profile_picture?: NullableStringFieldUpdateOperationsInput | string | null
    profile_cover?: NullableStringFieldUpdateOperationsInput | string | null
    profile_animation?: NullableStringFieldUpdateOperationsInput | string | null
    id?: StringFieldUpdateOperationsInput | string
    account?: AccountUpdateOneWithoutProfileInput
    sections?: SectionsUpdateManyWithoutProfileInput
  }

  export type ProfileUncheckedUpdateInput = {
    username?: StringFieldUpdateOperationsInput | string
    first_name?: StringFieldUpdateOperationsInput | string
    last_name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    greeting?: StringFieldUpdateOperationsInput | string
    color?: NullableStringFieldUpdateOperationsInput | string | null
    description?: StringFieldUpdateOperationsInput | string
    profile_picture?: NullableStringFieldUpdateOperationsInput | string | null
    profile_cover?: NullableStringFieldUpdateOperationsInput | string | null
    profile_animation?: NullableStringFieldUpdateOperationsInput | string | null
    id?: StringFieldUpdateOperationsInput | string
    account?: AccountUncheckedUpdateOneWithoutProfileInput
    sections?: SectionsUncheckedUpdateManyWithoutProfileInput
  }

  export type ProfileCreateManyInput = {
    username: string
    first_name: string
    last_name: string
    email: string
    greeting: string
    color?: string | null
    description: string
    profile_picture?: string | null
    profile_cover?: string | null
    profile_animation?: string | null
    id?: string
  }

  export type ProfileUpdateManyMutationInput = {
    username?: StringFieldUpdateOperationsInput | string
    first_name?: StringFieldUpdateOperationsInput | string
    last_name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    greeting?: StringFieldUpdateOperationsInput | string
    color?: NullableStringFieldUpdateOperationsInput | string | null
    description?: StringFieldUpdateOperationsInput | string
    profile_picture?: NullableStringFieldUpdateOperationsInput | string | null
    profile_cover?: NullableStringFieldUpdateOperationsInput | string | null
    profile_animation?: NullableStringFieldUpdateOperationsInput | string | null
    id?: StringFieldUpdateOperationsInput | string
  }

  export type ProfileUncheckedUpdateManyInput = {
    username?: StringFieldUpdateOperationsInput | string
    first_name?: StringFieldUpdateOperationsInput | string
    last_name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    greeting?: StringFieldUpdateOperationsInput | string
    color?: NullableStringFieldUpdateOperationsInput | string | null
    description?: StringFieldUpdateOperationsInput | string
    profile_picture?: NullableStringFieldUpdateOperationsInput | string | null
    profile_cover?: NullableStringFieldUpdateOperationsInput | string | null
    profile_animation?: NullableStringFieldUpdateOperationsInput | string | null
    id?: StringFieldUpdateOperationsInput | string
  }

  export type SectionsCreateInput = {
    id?: string
    title: string
    profile: ProfileCreateNestedOneWithoutSectionsInput
    components?: SectionsComponentsCreateNestedManyWithoutSectionInput
  }

  export type SectionsUncheckedCreateInput = {
    id?: string
    username: string
    title: string
    components?: SectionsComponentsUncheckedCreateNestedManyWithoutSectionInput
  }

  export type SectionsUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    profile?: ProfileUpdateOneRequiredWithoutSectionsInput
    components?: SectionsComponentsUpdateManyWithoutSectionInput
  }

  export type SectionsUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    components?: SectionsComponentsUncheckedUpdateManyWithoutSectionInput
  }

  export type SectionsCreateManyInput = {
    id?: string
    username: string
    title: string
  }

  export type SectionsUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
  }

  export type SectionsUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
  }

  export type SectionsComponentsCreateInput = {
    id?: string
    type: string
    title: string
    value?: number | null
    description: string
    section: SectionsCreateNestedOneWithoutComponentsInput
    items?: ComponentItemsCreateNestedManyWithoutComponentInput
  }

  export type SectionsComponentsUncheckedCreateInput = {
    id?: string
    section_id: string
    type: string
    title: string
    value?: number | null
    description: string
    items?: ComponentItemsUncheckedCreateNestedManyWithoutComponentInput
  }

  export type SectionsComponentsUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    value?: NullableIntFieldUpdateOperationsInput | number | null
    description?: StringFieldUpdateOperationsInput | string
    section?: SectionsUpdateOneRequiredWithoutComponentsInput
    items?: ComponentItemsUpdateManyWithoutComponentInput
  }

  export type SectionsComponentsUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    section_id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    value?: NullableIntFieldUpdateOperationsInput | number | null
    description?: StringFieldUpdateOperationsInput | string
    items?: ComponentItemsUncheckedUpdateManyWithoutComponentInput
  }

  export type SectionsComponentsCreateManyInput = {
    id?: string
    section_id: string
    type: string
    title: string
    value?: number | null
    description: string
  }

  export type SectionsComponentsUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    value?: NullableIntFieldUpdateOperationsInput | number | null
    description?: StringFieldUpdateOperationsInput | string
  }

  export type SectionsComponentsUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    section_id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    value?: NullableIntFieldUpdateOperationsInput | number | null
    description?: StringFieldUpdateOperationsInput | string
  }

  export type ComponentItemsCreateInput = {
    id?: string
    type: string
    title: string
    value?: number | null
    description: string
    icon?: string | null
    path?: string | null
    component: SectionsComponentsCreateNestedOneWithoutItemsInput
  }

  export type ComponentItemsUncheckedCreateInput = {
    id?: string
    component_id: string
    type: string
    title: string
    value?: number | null
    description: string
    icon?: string | null
    path?: string | null
  }

  export type ComponentItemsUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    value?: NullableIntFieldUpdateOperationsInput | number | null
    description?: StringFieldUpdateOperationsInput | string
    icon?: NullableStringFieldUpdateOperationsInput | string | null
    path?: NullableStringFieldUpdateOperationsInput | string | null
    component?: SectionsComponentsUpdateOneRequiredWithoutItemsInput
  }

  export type ComponentItemsUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    component_id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    value?: NullableIntFieldUpdateOperationsInput | number | null
    description?: StringFieldUpdateOperationsInput | string
    icon?: NullableStringFieldUpdateOperationsInput | string | null
    path?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ComponentItemsCreateManyInput = {
    id?: string
    component_id: string
    type: string
    title: string
    value?: number | null
    description: string
    icon?: string | null
    path?: string | null
  }

  export type ComponentItemsUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    value?: NullableIntFieldUpdateOperationsInput | number | null
    description?: StringFieldUpdateOperationsInput | string
    icon?: NullableStringFieldUpdateOperationsInput | string | null
    path?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ComponentItemsUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    component_id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    value?: NullableIntFieldUpdateOperationsInput | number | null
    description?: StringFieldUpdateOperationsInput | string
    icon?: NullableStringFieldUpdateOperationsInput | string | null
    path?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type AccountTokenCreateInput = {
    id?: string
    refresh_token: string
    expires_date: Date | string
    created_at: Date | string
    account_token: AccountCreateNestedOneWithoutTokensInput
  }

  export type AccountTokenUncheckedCreateInput = {
    id?: string
    refresh_token: string
    account_id: string
    expires_date: Date | string
    created_at: Date | string
  }

  export type AccountTokenUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    refresh_token?: StringFieldUpdateOperationsInput | string
    expires_date?: DateTimeFieldUpdateOperationsInput | Date | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    account_token?: AccountUpdateOneRequiredWithoutTokensInput
  }

  export type AccountTokenUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    refresh_token?: StringFieldUpdateOperationsInput | string
    account_id?: StringFieldUpdateOperationsInput | string
    expires_date?: DateTimeFieldUpdateOperationsInput | Date | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AccountTokenCreateManyInput = {
    id?: string
    refresh_token: string
    account_id: string
    expires_date: Date | string
    created_at: Date | string
  }

  export type AccountTokenUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    refresh_token?: StringFieldUpdateOperationsInput | string
    expires_date?: DateTimeFieldUpdateOperationsInput | Date | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AccountTokenUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    refresh_token?: StringFieldUpdateOperationsInput | string
    account_id?: StringFieldUpdateOperationsInput | string
    expires_date?: DateTimeFieldUpdateOperationsInput | Date | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StringFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringFilter | string
  }

  export type StringNullableFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableFilter | string | null
  }

  export type DateTimeFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeFilter | Date | string
  }

  export type IntNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableFilter | number | null
  }

  export type AccountTokenListRelationFilter = {
    every?: AccountTokenWhereInput
    some?: AccountTokenWhereInput
    none?: AccountTokenWhereInput
  }

  export type ProfileRelationFilter = {
    is?: ProfileWhereInput
    isNot?: ProfileWhereInput
  }

  export type AccountTokenOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type AccountCountOrderByAggregateInput = {
    id?: SortOrder
    username?: SortOrder
    first_name?: SortOrder
    last_name?: SortOrder
    email?: SortOrder
    created_at?: SortOrder
    password?: SortOrder
    priv_level?: SortOrder
  }

  export type AccountAvgOrderByAggregateInput = {
    priv_level?: SortOrder
  }

  export type AccountMaxOrderByAggregateInput = {
    id?: SortOrder
    username?: SortOrder
    first_name?: SortOrder
    last_name?: SortOrder
    email?: SortOrder
    created_at?: SortOrder
    password?: SortOrder
    priv_level?: SortOrder
  }

  export type AccountMinOrderByAggregateInput = {
    id?: SortOrder
    username?: SortOrder
    first_name?: SortOrder
    last_name?: SortOrder
    email?: SortOrder
    created_at?: SortOrder
    password?: SortOrder
    priv_level?: SortOrder
  }

  export type AccountSumOrderByAggregateInput = {
    priv_level?: SortOrder
  }

  export type StringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }

  export type StringNullableWithAggregatesFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableWithAggregatesFilter | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedStringNullableFilter
    _max?: NestedStringNullableFilter
  }

  export type DateTimeWithAggregatesFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeWithAggregatesFilter | Date | string
    _count?: NestedIntFilter
    _min?: NestedDateTimeFilter
    _max?: NestedDateTimeFilter
  }

  export type IntNullableWithAggregatesFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableWithAggregatesFilter | number | null
    _count?: NestedIntNullableFilter
    _avg?: NestedFloatNullableFilter
    _sum?: NestedIntNullableFilter
    _min?: NestedIntNullableFilter
    _max?: NestedIntNullableFilter
  }

  export type AccountRelationFilter = {
    is?: AccountWhereInput | null
    isNot?: AccountWhereInput | null
  }

  export type SectionsListRelationFilter = {
    every?: SectionsWhereInput
    some?: SectionsWhereInput
    none?: SectionsWhereInput
  }

  export type SectionsOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ProfileCountOrderByAggregateInput = {
    username?: SortOrder
    first_name?: SortOrder
    last_name?: SortOrder
    email?: SortOrder
    greeting?: SortOrder
    color?: SortOrder
    description?: SortOrder
    profile_picture?: SortOrder
    profile_cover?: SortOrder
    profile_animation?: SortOrder
    id?: SortOrder
  }

  export type ProfileMaxOrderByAggregateInput = {
    username?: SortOrder
    first_name?: SortOrder
    last_name?: SortOrder
    email?: SortOrder
    greeting?: SortOrder
    color?: SortOrder
    description?: SortOrder
    profile_picture?: SortOrder
    profile_cover?: SortOrder
    profile_animation?: SortOrder
    id?: SortOrder
  }

  export type ProfileMinOrderByAggregateInput = {
    username?: SortOrder
    first_name?: SortOrder
    last_name?: SortOrder
    email?: SortOrder
    greeting?: SortOrder
    color?: SortOrder
    description?: SortOrder
    profile_picture?: SortOrder
    profile_cover?: SortOrder
    profile_animation?: SortOrder
    id?: SortOrder
  }

  export type SectionsComponentsListRelationFilter = {
    every?: SectionsComponentsWhereInput
    some?: SectionsComponentsWhereInput
    none?: SectionsComponentsWhereInput
  }

  export type SectionsComponentsOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type SectionsCountOrderByAggregateInput = {
    id?: SortOrder
    username?: SortOrder
    title?: SortOrder
  }

  export type SectionsMaxOrderByAggregateInput = {
    id?: SortOrder
    username?: SortOrder
    title?: SortOrder
  }

  export type SectionsMinOrderByAggregateInput = {
    id?: SortOrder
    username?: SortOrder
    title?: SortOrder
  }

  export type SectionsRelationFilter = {
    is?: SectionsWhereInput
    isNot?: SectionsWhereInput
  }

  export type ComponentItemsListRelationFilter = {
    every?: ComponentItemsWhereInput
    some?: ComponentItemsWhereInput
    none?: ComponentItemsWhereInput
  }

  export type ComponentItemsOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type SectionsComponentsCountOrderByAggregateInput = {
    id?: SortOrder
    section_id?: SortOrder
    type?: SortOrder
    title?: SortOrder
    value?: SortOrder
    description?: SortOrder
  }

  export type SectionsComponentsAvgOrderByAggregateInput = {
    value?: SortOrder
  }

  export type SectionsComponentsMaxOrderByAggregateInput = {
    id?: SortOrder
    section_id?: SortOrder
    type?: SortOrder
    title?: SortOrder
    value?: SortOrder
    description?: SortOrder
  }

  export type SectionsComponentsMinOrderByAggregateInput = {
    id?: SortOrder
    section_id?: SortOrder
    type?: SortOrder
    title?: SortOrder
    value?: SortOrder
    description?: SortOrder
  }

  export type SectionsComponentsSumOrderByAggregateInput = {
    value?: SortOrder
  }

  export type SectionsComponentsRelationFilter = {
    is?: SectionsComponentsWhereInput
    isNot?: SectionsComponentsWhereInput
  }

  export type ComponentItemsCountOrderByAggregateInput = {
    id?: SortOrder
    component_id?: SortOrder
    type?: SortOrder
    title?: SortOrder
    value?: SortOrder
    description?: SortOrder
    icon?: SortOrder
    path?: SortOrder
  }

  export type ComponentItemsAvgOrderByAggregateInput = {
    value?: SortOrder
  }

  export type ComponentItemsMaxOrderByAggregateInput = {
    id?: SortOrder
    component_id?: SortOrder
    type?: SortOrder
    title?: SortOrder
    value?: SortOrder
    description?: SortOrder
    icon?: SortOrder
    path?: SortOrder
  }

  export type ComponentItemsMinOrderByAggregateInput = {
    id?: SortOrder
    component_id?: SortOrder
    type?: SortOrder
    title?: SortOrder
    value?: SortOrder
    description?: SortOrder
    icon?: SortOrder
    path?: SortOrder
  }

  export type ComponentItemsSumOrderByAggregateInput = {
    value?: SortOrder
  }

  export type AccountTokenCountOrderByAggregateInput = {
    id?: SortOrder
    refresh_token?: SortOrder
    account_id?: SortOrder
    expires_date?: SortOrder
    created_at?: SortOrder
  }

  export type AccountTokenMaxOrderByAggregateInput = {
    id?: SortOrder
    refresh_token?: SortOrder
    account_id?: SortOrder
    expires_date?: SortOrder
    created_at?: SortOrder
  }

  export type AccountTokenMinOrderByAggregateInput = {
    id?: SortOrder
    refresh_token?: SortOrder
    account_id?: SortOrder
    expires_date?: SortOrder
    created_at?: SortOrder
  }

  export type AccountTokenCreateNestedManyWithoutAccount_tokenInput = {
    create?: XOR<Enumerable<AccountTokenCreateWithoutAccount_tokenInput>, Enumerable<AccountTokenUncheckedCreateWithoutAccount_tokenInput>>
    connectOrCreate?: Enumerable<AccountTokenCreateOrConnectWithoutAccount_tokenInput>
    createMany?: AccountTokenCreateManyAccount_tokenInputEnvelope
    connect?: Enumerable<AccountTokenWhereUniqueInput>
  }

  export type ProfileCreateNestedOneWithoutAccountInput = {
    create?: XOR<ProfileCreateWithoutAccountInput, ProfileUncheckedCreateWithoutAccountInput>
    connectOrCreate?: ProfileCreateOrConnectWithoutAccountInput
    connect?: ProfileWhereUniqueInput
  }

  export type AccountTokenUncheckedCreateNestedManyWithoutAccount_tokenInput = {
    create?: XOR<Enumerable<AccountTokenCreateWithoutAccount_tokenInput>, Enumerable<AccountTokenUncheckedCreateWithoutAccount_tokenInput>>
    connectOrCreate?: Enumerable<AccountTokenCreateOrConnectWithoutAccount_tokenInput>
    createMany?: AccountTokenCreateManyAccount_tokenInputEnvelope
    connect?: Enumerable<AccountTokenWhereUniqueInput>
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type AccountTokenUpdateManyWithoutAccount_tokenInput = {
    create?: XOR<Enumerable<AccountTokenCreateWithoutAccount_tokenInput>, Enumerable<AccountTokenUncheckedCreateWithoutAccount_tokenInput>>
    connectOrCreate?: Enumerable<AccountTokenCreateOrConnectWithoutAccount_tokenInput>
    upsert?: Enumerable<AccountTokenUpsertWithWhereUniqueWithoutAccount_tokenInput>
    createMany?: AccountTokenCreateManyAccount_tokenInputEnvelope
    set?: Enumerable<AccountTokenWhereUniqueInput>
    disconnect?: Enumerable<AccountTokenWhereUniqueInput>
    delete?: Enumerable<AccountTokenWhereUniqueInput>
    connect?: Enumerable<AccountTokenWhereUniqueInput>
    update?: Enumerable<AccountTokenUpdateWithWhereUniqueWithoutAccount_tokenInput>
    updateMany?: Enumerable<AccountTokenUpdateManyWithWhereWithoutAccount_tokenInput>
    deleteMany?: Enumerable<AccountTokenScalarWhereInput>
  }

  export type ProfileUpdateOneRequiredWithoutAccountInput = {
    create?: XOR<ProfileCreateWithoutAccountInput, ProfileUncheckedCreateWithoutAccountInput>
    connectOrCreate?: ProfileCreateOrConnectWithoutAccountInput
    upsert?: ProfileUpsertWithoutAccountInput
    connect?: ProfileWhereUniqueInput
    update?: XOR<ProfileUpdateWithoutAccountInput, ProfileUncheckedUpdateWithoutAccountInput>
  }

  export type AccountTokenUncheckedUpdateManyWithoutAccount_tokenInput = {
    create?: XOR<Enumerable<AccountTokenCreateWithoutAccount_tokenInput>, Enumerable<AccountTokenUncheckedCreateWithoutAccount_tokenInput>>
    connectOrCreate?: Enumerable<AccountTokenCreateOrConnectWithoutAccount_tokenInput>
    upsert?: Enumerable<AccountTokenUpsertWithWhereUniqueWithoutAccount_tokenInput>
    createMany?: AccountTokenCreateManyAccount_tokenInputEnvelope
    set?: Enumerable<AccountTokenWhereUniqueInput>
    disconnect?: Enumerable<AccountTokenWhereUniqueInput>
    delete?: Enumerable<AccountTokenWhereUniqueInput>
    connect?: Enumerable<AccountTokenWhereUniqueInput>
    update?: Enumerable<AccountTokenUpdateWithWhereUniqueWithoutAccount_tokenInput>
    updateMany?: Enumerable<AccountTokenUpdateManyWithWhereWithoutAccount_tokenInput>
    deleteMany?: Enumerable<AccountTokenScalarWhereInput>
  }

  export type AccountCreateNestedOneWithoutProfileInput = {
    create?: XOR<AccountCreateWithoutProfileInput, AccountUncheckedCreateWithoutProfileInput>
    connectOrCreate?: AccountCreateOrConnectWithoutProfileInput
    connect?: AccountWhereUniqueInput
  }

  export type SectionsCreateNestedManyWithoutProfileInput = {
    create?: XOR<Enumerable<SectionsCreateWithoutProfileInput>, Enumerable<SectionsUncheckedCreateWithoutProfileInput>>
    connectOrCreate?: Enumerable<SectionsCreateOrConnectWithoutProfileInput>
    createMany?: SectionsCreateManyProfileInputEnvelope
    connect?: Enumerable<SectionsWhereUniqueInput>
  }

  export type AccountUncheckedCreateNestedOneWithoutProfileInput = {
    create?: XOR<AccountCreateWithoutProfileInput, AccountUncheckedCreateWithoutProfileInput>
    connectOrCreate?: AccountCreateOrConnectWithoutProfileInput
    connect?: AccountWhereUniqueInput
  }

  export type SectionsUncheckedCreateNestedManyWithoutProfileInput = {
    create?: XOR<Enumerable<SectionsCreateWithoutProfileInput>, Enumerable<SectionsUncheckedCreateWithoutProfileInput>>
    connectOrCreate?: Enumerable<SectionsCreateOrConnectWithoutProfileInput>
    createMany?: SectionsCreateManyProfileInputEnvelope
    connect?: Enumerable<SectionsWhereUniqueInput>
  }

  export type AccountUpdateOneWithoutProfileInput = {
    create?: XOR<AccountCreateWithoutProfileInput, AccountUncheckedCreateWithoutProfileInput>
    connectOrCreate?: AccountCreateOrConnectWithoutProfileInput
    upsert?: AccountUpsertWithoutProfileInput
    disconnect?: boolean
    delete?: boolean
    connect?: AccountWhereUniqueInput
    update?: XOR<AccountUpdateWithoutProfileInput, AccountUncheckedUpdateWithoutProfileInput>
  }

  export type SectionsUpdateManyWithoutProfileInput = {
    create?: XOR<Enumerable<SectionsCreateWithoutProfileInput>, Enumerable<SectionsUncheckedCreateWithoutProfileInput>>
    connectOrCreate?: Enumerable<SectionsCreateOrConnectWithoutProfileInput>
    upsert?: Enumerable<SectionsUpsertWithWhereUniqueWithoutProfileInput>
    createMany?: SectionsCreateManyProfileInputEnvelope
    set?: Enumerable<SectionsWhereUniqueInput>
    disconnect?: Enumerable<SectionsWhereUniqueInput>
    delete?: Enumerable<SectionsWhereUniqueInput>
    connect?: Enumerable<SectionsWhereUniqueInput>
    update?: Enumerable<SectionsUpdateWithWhereUniqueWithoutProfileInput>
    updateMany?: Enumerable<SectionsUpdateManyWithWhereWithoutProfileInput>
    deleteMany?: Enumerable<SectionsScalarWhereInput>
  }

  export type AccountUncheckedUpdateOneWithoutProfileInput = {
    create?: XOR<AccountCreateWithoutProfileInput, AccountUncheckedCreateWithoutProfileInput>
    connectOrCreate?: AccountCreateOrConnectWithoutProfileInput
    upsert?: AccountUpsertWithoutProfileInput
    disconnect?: boolean
    delete?: boolean
    connect?: AccountWhereUniqueInput
    update?: XOR<AccountUpdateWithoutProfileInput, AccountUncheckedUpdateWithoutProfileInput>
  }

  export type SectionsUncheckedUpdateManyWithoutProfileInput = {
    create?: XOR<Enumerable<SectionsCreateWithoutProfileInput>, Enumerable<SectionsUncheckedCreateWithoutProfileInput>>
    connectOrCreate?: Enumerable<SectionsCreateOrConnectWithoutProfileInput>
    upsert?: Enumerable<SectionsUpsertWithWhereUniqueWithoutProfileInput>
    createMany?: SectionsCreateManyProfileInputEnvelope
    set?: Enumerable<SectionsWhereUniqueInput>
    disconnect?: Enumerable<SectionsWhereUniqueInput>
    delete?: Enumerable<SectionsWhereUniqueInput>
    connect?: Enumerable<SectionsWhereUniqueInput>
    update?: Enumerable<SectionsUpdateWithWhereUniqueWithoutProfileInput>
    updateMany?: Enumerable<SectionsUpdateManyWithWhereWithoutProfileInput>
    deleteMany?: Enumerable<SectionsScalarWhereInput>
  }

  export type ProfileCreateNestedOneWithoutSectionsInput = {
    create?: XOR<ProfileCreateWithoutSectionsInput, ProfileUncheckedCreateWithoutSectionsInput>
    connectOrCreate?: ProfileCreateOrConnectWithoutSectionsInput
    connect?: ProfileWhereUniqueInput
  }

  export type SectionsComponentsCreateNestedManyWithoutSectionInput = {
    create?: XOR<Enumerable<SectionsComponentsCreateWithoutSectionInput>, Enumerable<SectionsComponentsUncheckedCreateWithoutSectionInput>>
    connectOrCreate?: Enumerable<SectionsComponentsCreateOrConnectWithoutSectionInput>
    createMany?: SectionsComponentsCreateManySectionInputEnvelope
    connect?: Enumerable<SectionsComponentsWhereUniqueInput>
  }

  export type SectionsComponentsUncheckedCreateNestedManyWithoutSectionInput = {
    create?: XOR<Enumerable<SectionsComponentsCreateWithoutSectionInput>, Enumerable<SectionsComponentsUncheckedCreateWithoutSectionInput>>
    connectOrCreate?: Enumerable<SectionsComponentsCreateOrConnectWithoutSectionInput>
    createMany?: SectionsComponentsCreateManySectionInputEnvelope
    connect?: Enumerable<SectionsComponentsWhereUniqueInput>
  }

  export type ProfileUpdateOneRequiredWithoutSectionsInput = {
    create?: XOR<ProfileCreateWithoutSectionsInput, ProfileUncheckedCreateWithoutSectionsInput>
    connectOrCreate?: ProfileCreateOrConnectWithoutSectionsInput
    upsert?: ProfileUpsertWithoutSectionsInput
    connect?: ProfileWhereUniqueInput
    update?: XOR<ProfileUpdateWithoutSectionsInput, ProfileUncheckedUpdateWithoutSectionsInput>
  }

  export type SectionsComponentsUpdateManyWithoutSectionInput = {
    create?: XOR<Enumerable<SectionsComponentsCreateWithoutSectionInput>, Enumerable<SectionsComponentsUncheckedCreateWithoutSectionInput>>
    connectOrCreate?: Enumerable<SectionsComponentsCreateOrConnectWithoutSectionInput>
    upsert?: Enumerable<SectionsComponentsUpsertWithWhereUniqueWithoutSectionInput>
    createMany?: SectionsComponentsCreateManySectionInputEnvelope
    set?: Enumerable<SectionsComponentsWhereUniqueInput>
    disconnect?: Enumerable<SectionsComponentsWhereUniqueInput>
    delete?: Enumerable<SectionsComponentsWhereUniqueInput>
    connect?: Enumerable<SectionsComponentsWhereUniqueInput>
    update?: Enumerable<SectionsComponentsUpdateWithWhereUniqueWithoutSectionInput>
    updateMany?: Enumerable<SectionsComponentsUpdateManyWithWhereWithoutSectionInput>
    deleteMany?: Enumerable<SectionsComponentsScalarWhereInput>
  }

  export type SectionsComponentsUncheckedUpdateManyWithoutSectionInput = {
    create?: XOR<Enumerable<SectionsComponentsCreateWithoutSectionInput>, Enumerable<SectionsComponentsUncheckedCreateWithoutSectionInput>>
    connectOrCreate?: Enumerable<SectionsComponentsCreateOrConnectWithoutSectionInput>
    upsert?: Enumerable<SectionsComponentsUpsertWithWhereUniqueWithoutSectionInput>
    createMany?: SectionsComponentsCreateManySectionInputEnvelope
    set?: Enumerable<SectionsComponentsWhereUniqueInput>
    disconnect?: Enumerable<SectionsComponentsWhereUniqueInput>
    delete?: Enumerable<SectionsComponentsWhereUniqueInput>
    connect?: Enumerable<SectionsComponentsWhereUniqueInput>
    update?: Enumerable<SectionsComponentsUpdateWithWhereUniqueWithoutSectionInput>
    updateMany?: Enumerable<SectionsComponentsUpdateManyWithWhereWithoutSectionInput>
    deleteMany?: Enumerable<SectionsComponentsScalarWhereInput>
  }

  export type SectionsCreateNestedOneWithoutComponentsInput = {
    create?: XOR<SectionsCreateWithoutComponentsInput, SectionsUncheckedCreateWithoutComponentsInput>
    connectOrCreate?: SectionsCreateOrConnectWithoutComponentsInput
    connect?: SectionsWhereUniqueInput
  }

  export type ComponentItemsCreateNestedManyWithoutComponentInput = {
    create?: XOR<Enumerable<ComponentItemsCreateWithoutComponentInput>, Enumerable<ComponentItemsUncheckedCreateWithoutComponentInput>>
    connectOrCreate?: Enumerable<ComponentItemsCreateOrConnectWithoutComponentInput>
    createMany?: ComponentItemsCreateManyComponentInputEnvelope
    connect?: Enumerable<ComponentItemsWhereUniqueInput>
  }

  export type ComponentItemsUncheckedCreateNestedManyWithoutComponentInput = {
    create?: XOR<Enumerable<ComponentItemsCreateWithoutComponentInput>, Enumerable<ComponentItemsUncheckedCreateWithoutComponentInput>>
    connectOrCreate?: Enumerable<ComponentItemsCreateOrConnectWithoutComponentInput>
    createMany?: ComponentItemsCreateManyComponentInputEnvelope
    connect?: Enumerable<ComponentItemsWhereUniqueInput>
  }

  export type SectionsUpdateOneRequiredWithoutComponentsInput = {
    create?: XOR<SectionsCreateWithoutComponentsInput, SectionsUncheckedCreateWithoutComponentsInput>
    connectOrCreate?: SectionsCreateOrConnectWithoutComponentsInput
    upsert?: SectionsUpsertWithoutComponentsInput
    connect?: SectionsWhereUniqueInput
    update?: XOR<SectionsUpdateWithoutComponentsInput, SectionsUncheckedUpdateWithoutComponentsInput>
  }

  export type ComponentItemsUpdateManyWithoutComponentInput = {
    create?: XOR<Enumerable<ComponentItemsCreateWithoutComponentInput>, Enumerable<ComponentItemsUncheckedCreateWithoutComponentInput>>
    connectOrCreate?: Enumerable<ComponentItemsCreateOrConnectWithoutComponentInput>
    upsert?: Enumerable<ComponentItemsUpsertWithWhereUniqueWithoutComponentInput>
    createMany?: ComponentItemsCreateManyComponentInputEnvelope
    set?: Enumerable<ComponentItemsWhereUniqueInput>
    disconnect?: Enumerable<ComponentItemsWhereUniqueInput>
    delete?: Enumerable<ComponentItemsWhereUniqueInput>
    connect?: Enumerable<ComponentItemsWhereUniqueInput>
    update?: Enumerable<ComponentItemsUpdateWithWhereUniqueWithoutComponentInput>
    updateMany?: Enumerable<ComponentItemsUpdateManyWithWhereWithoutComponentInput>
    deleteMany?: Enumerable<ComponentItemsScalarWhereInput>
  }

  export type ComponentItemsUncheckedUpdateManyWithoutComponentInput = {
    create?: XOR<Enumerable<ComponentItemsCreateWithoutComponentInput>, Enumerable<ComponentItemsUncheckedCreateWithoutComponentInput>>
    connectOrCreate?: Enumerable<ComponentItemsCreateOrConnectWithoutComponentInput>
    upsert?: Enumerable<ComponentItemsUpsertWithWhereUniqueWithoutComponentInput>
    createMany?: ComponentItemsCreateManyComponentInputEnvelope
    set?: Enumerable<ComponentItemsWhereUniqueInput>
    disconnect?: Enumerable<ComponentItemsWhereUniqueInput>
    delete?: Enumerable<ComponentItemsWhereUniqueInput>
    connect?: Enumerable<ComponentItemsWhereUniqueInput>
    update?: Enumerable<ComponentItemsUpdateWithWhereUniqueWithoutComponentInput>
    updateMany?: Enumerable<ComponentItemsUpdateManyWithWhereWithoutComponentInput>
    deleteMany?: Enumerable<ComponentItemsScalarWhereInput>
  }

  export type SectionsComponentsCreateNestedOneWithoutItemsInput = {
    create?: XOR<SectionsComponentsCreateWithoutItemsInput, SectionsComponentsUncheckedCreateWithoutItemsInput>
    connectOrCreate?: SectionsComponentsCreateOrConnectWithoutItemsInput
    connect?: SectionsComponentsWhereUniqueInput
  }

  export type SectionsComponentsUpdateOneRequiredWithoutItemsInput = {
    create?: XOR<SectionsComponentsCreateWithoutItemsInput, SectionsComponentsUncheckedCreateWithoutItemsInput>
    connectOrCreate?: SectionsComponentsCreateOrConnectWithoutItemsInput
    upsert?: SectionsComponentsUpsertWithoutItemsInput
    connect?: SectionsComponentsWhereUniqueInput
    update?: XOR<SectionsComponentsUpdateWithoutItemsInput, SectionsComponentsUncheckedUpdateWithoutItemsInput>
  }

  export type AccountCreateNestedOneWithoutTokensInput = {
    create?: XOR<AccountCreateWithoutTokensInput, AccountUncheckedCreateWithoutTokensInput>
    connectOrCreate?: AccountCreateOrConnectWithoutTokensInput
    connect?: AccountWhereUniqueInput
  }

  export type AccountUpdateOneRequiredWithoutTokensInput = {
    create?: XOR<AccountCreateWithoutTokensInput, AccountUncheckedCreateWithoutTokensInput>
    connectOrCreate?: AccountCreateOrConnectWithoutTokensInput
    upsert?: AccountUpsertWithoutTokensInput
    connect?: AccountWhereUniqueInput
    update?: XOR<AccountUpdateWithoutTokensInput, AccountUncheckedUpdateWithoutTokensInput>
  }

  export type NestedStringFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringFilter | string
  }

  export type NestedStringNullableFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableFilter | string | null
  }

  export type NestedDateTimeFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeFilter | Date | string
  }

  export type NestedIntNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableFilter | number | null
  }

  export type NestedStringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }

  export type NestedIntFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type NestedStringNullableWithAggregatesFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableWithAggregatesFilter | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedStringNullableFilter
    _max?: NestedStringNullableFilter
  }

  export type NestedDateTimeWithAggregatesFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeWithAggregatesFilter | Date | string
    _count?: NestedIntFilter
    _min?: NestedDateTimeFilter
    _max?: NestedDateTimeFilter
  }

  export type NestedIntNullableWithAggregatesFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableWithAggregatesFilter | number | null
    _count?: NestedIntNullableFilter
    _avg?: NestedFloatNullableFilter
    _sum?: NestedIntNullableFilter
    _min?: NestedIntNullableFilter
    _max?: NestedIntNullableFilter
  }

  export type NestedFloatNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatNullableFilter | number | null
  }

  export type AccountTokenCreateWithoutAccount_tokenInput = {
    id?: string
    refresh_token: string
    expires_date: Date | string
    created_at: Date | string
  }

  export type AccountTokenUncheckedCreateWithoutAccount_tokenInput = {
    id?: string
    refresh_token: string
    expires_date: Date | string
    created_at: Date | string
  }

  export type AccountTokenCreateOrConnectWithoutAccount_tokenInput = {
    where: AccountTokenWhereUniqueInput
    create: XOR<AccountTokenCreateWithoutAccount_tokenInput, AccountTokenUncheckedCreateWithoutAccount_tokenInput>
  }

  export type AccountTokenCreateManyAccount_tokenInputEnvelope = {
    data: Enumerable<AccountTokenCreateManyAccount_tokenInput>
  }

  export type ProfileCreateWithoutAccountInput = {
    username: string
    first_name: string
    last_name: string
    email: string
    greeting: string
    color?: string | null
    description: string
    profile_picture?: string | null
    profile_cover?: string | null
    profile_animation?: string | null
    id?: string
    sections?: SectionsCreateNestedManyWithoutProfileInput
  }

  export type ProfileUncheckedCreateWithoutAccountInput = {
    username: string
    first_name: string
    last_name: string
    email: string
    greeting: string
    color?: string | null
    description: string
    profile_picture?: string | null
    profile_cover?: string | null
    profile_animation?: string | null
    id?: string
    sections?: SectionsUncheckedCreateNestedManyWithoutProfileInput
  }

  export type ProfileCreateOrConnectWithoutAccountInput = {
    where: ProfileWhereUniqueInput
    create: XOR<ProfileCreateWithoutAccountInput, ProfileUncheckedCreateWithoutAccountInput>
  }

  export type AccountTokenUpsertWithWhereUniqueWithoutAccount_tokenInput = {
    where: AccountTokenWhereUniqueInput
    update: XOR<AccountTokenUpdateWithoutAccount_tokenInput, AccountTokenUncheckedUpdateWithoutAccount_tokenInput>
    create: XOR<AccountTokenCreateWithoutAccount_tokenInput, AccountTokenUncheckedCreateWithoutAccount_tokenInput>
  }

  export type AccountTokenUpdateWithWhereUniqueWithoutAccount_tokenInput = {
    where: AccountTokenWhereUniqueInput
    data: XOR<AccountTokenUpdateWithoutAccount_tokenInput, AccountTokenUncheckedUpdateWithoutAccount_tokenInput>
  }

  export type AccountTokenUpdateManyWithWhereWithoutAccount_tokenInput = {
    where: AccountTokenScalarWhereInput
    data: XOR<AccountTokenUpdateManyMutationInput, AccountTokenUncheckedUpdateManyWithoutTokensInput>
  }

  export type AccountTokenScalarWhereInput = {
    AND?: Enumerable<AccountTokenScalarWhereInput>
    OR?: Enumerable<AccountTokenScalarWhereInput>
    NOT?: Enumerable<AccountTokenScalarWhereInput>
    id?: StringFilter | string
    refresh_token?: StringFilter | string
    account_id?: StringFilter | string
    expires_date?: DateTimeFilter | Date | string
    created_at?: DateTimeFilter | Date | string
  }

  export type ProfileUpsertWithoutAccountInput = {
    update: XOR<ProfileUpdateWithoutAccountInput, ProfileUncheckedUpdateWithoutAccountInput>
    create: XOR<ProfileCreateWithoutAccountInput, ProfileUncheckedCreateWithoutAccountInput>
  }

  export type ProfileUpdateWithoutAccountInput = {
    username?: StringFieldUpdateOperationsInput | string
    first_name?: StringFieldUpdateOperationsInput | string
    last_name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    greeting?: StringFieldUpdateOperationsInput | string
    color?: NullableStringFieldUpdateOperationsInput | string | null
    description?: StringFieldUpdateOperationsInput | string
    profile_picture?: NullableStringFieldUpdateOperationsInput | string | null
    profile_cover?: NullableStringFieldUpdateOperationsInput | string | null
    profile_animation?: NullableStringFieldUpdateOperationsInput | string | null
    id?: StringFieldUpdateOperationsInput | string
    sections?: SectionsUpdateManyWithoutProfileInput
  }

  export type ProfileUncheckedUpdateWithoutAccountInput = {
    username?: StringFieldUpdateOperationsInput | string
    first_name?: StringFieldUpdateOperationsInput | string
    last_name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    greeting?: StringFieldUpdateOperationsInput | string
    color?: NullableStringFieldUpdateOperationsInput | string | null
    description?: StringFieldUpdateOperationsInput | string
    profile_picture?: NullableStringFieldUpdateOperationsInput | string | null
    profile_cover?: NullableStringFieldUpdateOperationsInput | string | null
    profile_animation?: NullableStringFieldUpdateOperationsInput | string | null
    id?: StringFieldUpdateOperationsInput | string
    sections?: SectionsUncheckedUpdateManyWithoutProfileInput
  }

  export type AccountCreateWithoutProfileInput = {
    id?: string
    first_name?: string | null
    last_name?: string | null
    email: string
    created_at: Date | string
    password: string
    priv_level?: number | null
    tokens?: AccountTokenCreateNestedManyWithoutAccount_tokenInput
  }

  export type AccountUncheckedCreateWithoutProfileInput = {
    id?: string
    first_name?: string | null
    last_name?: string | null
    email: string
    created_at: Date | string
    password: string
    priv_level?: number | null
    tokens?: AccountTokenUncheckedCreateNestedManyWithoutAccount_tokenInput
  }

  export type AccountCreateOrConnectWithoutProfileInput = {
    where: AccountWhereUniqueInput
    create: XOR<AccountCreateWithoutProfileInput, AccountUncheckedCreateWithoutProfileInput>
  }

  export type SectionsCreateWithoutProfileInput = {
    id?: string
    title: string
    components?: SectionsComponentsCreateNestedManyWithoutSectionInput
  }

  export type SectionsUncheckedCreateWithoutProfileInput = {
    id?: string
    title: string
    components?: SectionsComponentsUncheckedCreateNestedManyWithoutSectionInput
  }

  export type SectionsCreateOrConnectWithoutProfileInput = {
    where: SectionsWhereUniqueInput
    create: XOR<SectionsCreateWithoutProfileInput, SectionsUncheckedCreateWithoutProfileInput>
  }

  export type SectionsCreateManyProfileInputEnvelope = {
    data: Enumerable<SectionsCreateManyProfileInput>
  }

  export type AccountUpsertWithoutProfileInput = {
    update: XOR<AccountUpdateWithoutProfileInput, AccountUncheckedUpdateWithoutProfileInput>
    create: XOR<AccountCreateWithoutProfileInput, AccountUncheckedCreateWithoutProfileInput>
  }

  export type AccountUpdateWithoutProfileInput = {
    id?: StringFieldUpdateOperationsInput | string
    first_name?: NullableStringFieldUpdateOperationsInput | string | null
    last_name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    password?: StringFieldUpdateOperationsInput | string
    priv_level?: NullableIntFieldUpdateOperationsInput | number | null
    tokens?: AccountTokenUpdateManyWithoutAccount_tokenInput
  }

  export type AccountUncheckedUpdateWithoutProfileInput = {
    id?: StringFieldUpdateOperationsInput | string
    first_name?: NullableStringFieldUpdateOperationsInput | string | null
    last_name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    password?: StringFieldUpdateOperationsInput | string
    priv_level?: NullableIntFieldUpdateOperationsInput | number | null
    tokens?: AccountTokenUncheckedUpdateManyWithoutAccount_tokenInput
  }

  export type SectionsUpsertWithWhereUniqueWithoutProfileInput = {
    where: SectionsWhereUniqueInput
    update: XOR<SectionsUpdateWithoutProfileInput, SectionsUncheckedUpdateWithoutProfileInput>
    create: XOR<SectionsCreateWithoutProfileInput, SectionsUncheckedCreateWithoutProfileInput>
  }

  export type SectionsUpdateWithWhereUniqueWithoutProfileInput = {
    where: SectionsWhereUniqueInput
    data: XOR<SectionsUpdateWithoutProfileInput, SectionsUncheckedUpdateWithoutProfileInput>
  }

  export type SectionsUpdateManyWithWhereWithoutProfileInput = {
    where: SectionsScalarWhereInput
    data: XOR<SectionsUpdateManyMutationInput, SectionsUncheckedUpdateManyWithoutSectionsInput>
  }

  export type SectionsScalarWhereInput = {
    AND?: Enumerable<SectionsScalarWhereInput>
    OR?: Enumerable<SectionsScalarWhereInput>
    NOT?: Enumerable<SectionsScalarWhereInput>
    id?: StringFilter | string
    username?: StringFilter | string
    title?: StringFilter | string
  }

  export type ProfileCreateWithoutSectionsInput = {
    username: string
    first_name: string
    last_name: string
    email: string
    greeting: string
    color?: string | null
    description: string
    profile_picture?: string | null
    profile_cover?: string | null
    profile_animation?: string | null
    id?: string
    account?: AccountCreateNestedOneWithoutProfileInput
  }

  export type ProfileUncheckedCreateWithoutSectionsInput = {
    username: string
    first_name: string
    last_name: string
    email: string
    greeting: string
    color?: string | null
    description: string
    profile_picture?: string | null
    profile_cover?: string | null
    profile_animation?: string | null
    id?: string
    account?: AccountUncheckedCreateNestedOneWithoutProfileInput
  }

  export type ProfileCreateOrConnectWithoutSectionsInput = {
    where: ProfileWhereUniqueInput
    create: XOR<ProfileCreateWithoutSectionsInput, ProfileUncheckedCreateWithoutSectionsInput>
  }

  export type SectionsComponentsCreateWithoutSectionInput = {
    id?: string
    type: string
    title: string
    value?: number | null
    description: string
    items?: ComponentItemsCreateNestedManyWithoutComponentInput
  }

  export type SectionsComponentsUncheckedCreateWithoutSectionInput = {
    id?: string
    type: string
    title: string
    value?: number | null
    description: string
    items?: ComponentItemsUncheckedCreateNestedManyWithoutComponentInput
  }

  export type SectionsComponentsCreateOrConnectWithoutSectionInput = {
    where: SectionsComponentsWhereUniqueInput
    create: XOR<SectionsComponentsCreateWithoutSectionInput, SectionsComponentsUncheckedCreateWithoutSectionInput>
  }

  export type SectionsComponentsCreateManySectionInputEnvelope = {
    data: Enumerable<SectionsComponentsCreateManySectionInput>
  }

  export type ProfileUpsertWithoutSectionsInput = {
    update: XOR<ProfileUpdateWithoutSectionsInput, ProfileUncheckedUpdateWithoutSectionsInput>
    create: XOR<ProfileCreateWithoutSectionsInput, ProfileUncheckedCreateWithoutSectionsInput>
  }

  export type ProfileUpdateWithoutSectionsInput = {
    username?: StringFieldUpdateOperationsInput | string
    first_name?: StringFieldUpdateOperationsInput | string
    last_name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    greeting?: StringFieldUpdateOperationsInput | string
    color?: NullableStringFieldUpdateOperationsInput | string | null
    description?: StringFieldUpdateOperationsInput | string
    profile_picture?: NullableStringFieldUpdateOperationsInput | string | null
    profile_cover?: NullableStringFieldUpdateOperationsInput | string | null
    profile_animation?: NullableStringFieldUpdateOperationsInput | string | null
    id?: StringFieldUpdateOperationsInput | string
    account?: AccountUpdateOneWithoutProfileInput
  }

  export type ProfileUncheckedUpdateWithoutSectionsInput = {
    username?: StringFieldUpdateOperationsInput | string
    first_name?: StringFieldUpdateOperationsInput | string
    last_name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    greeting?: StringFieldUpdateOperationsInput | string
    color?: NullableStringFieldUpdateOperationsInput | string | null
    description?: StringFieldUpdateOperationsInput | string
    profile_picture?: NullableStringFieldUpdateOperationsInput | string | null
    profile_cover?: NullableStringFieldUpdateOperationsInput | string | null
    profile_animation?: NullableStringFieldUpdateOperationsInput | string | null
    id?: StringFieldUpdateOperationsInput | string
    account?: AccountUncheckedUpdateOneWithoutProfileInput
  }

  export type SectionsComponentsUpsertWithWhereUniqueWithoutSectionInput = {
    where: SectionsComponentsWhereUniqueInput
    update: XOR<SectionsComponentsUpdateWithoutSectionInput, SectionsComponentsUncheckedUpdateWithoutSectionInput>
    create: XOR<SectionsComponentsCreateWithoutSectionInput, SectionsComponentsUncheckedCreateWithoutSectionInput>
  }

  export type SectionsComponentsUpdateWithWhereUniqueWithoutSectionInput = {
    where: SectionsComponentsWhereUniqueInput
    data: XOR<SectionsComponentsUpdateWithoutSectionInput, SectionsComponentsUncheckedUpdateWithoutSectionInput>
  }

  export type SectionsComponentsUpdateManyWithWhereWithoutSectionInput = {
    where: SectionsComponentsScalarWhereInput
    data: XOR<SectionsComponentsUpdateManyMutationInput, SectionsComponentsUncheckedUpdateManyWithoutComponentsInput>
  }

  export type SectionsComponentsScalarWhereInput = {
    AND?: Enumerable<SectionsComponentsScalarWhereInput>
    OR?: Enumerable<SectionsComponentsScalarWhereInput>
    NOT?: Enumerable<SectionsComponentsScalarWhereInput>
    id?: StringFilter | string
    section_id?: StringFilter | string
    type?: StringFilter | string
    title?: StringFilter | string
    value?: IntNullableFilter | number | null
    description?: StringFilter | string
  }

  export type SectionsCreateWithoutComponentsInput = {
    id?: string
    title: string
    profile: ProfileCreateNestedOneWithoutSectionsInput
  }

  export type SectionsUncheckedCreateWithoutComponentsInput = {
    id?: string
    username: string
    title: string
  }

  export type SectionsCreateOrConnectWithoutComponentsInput = {
    where: SectionsWhereUniqueInput
    create: XOR<SectionsCreateWithoutComponentsInput, SectionsUncheckedCreateWithoutComponentsInput>
  }

  export type ComponentItemsCreateWithoutComponentInput = {
    id?: string
    type: string
    title: string
    value?: number | null
    description: string
    icon?: string | null
    path?: string | null
  }

  export type ComponentItemsUncheckedCreateWithoutComponentInput = {
    id?: string
    type: string
    title: string
    value?: number | null
    description: string
    icon?: string | null
    path?: string | null
  }

  export type ComponentItemsCreateOrConnectWithoutComponentInput = {
    where: ComponentItemsWhereUniqueInput
    create: XOR<ComponentItemsCreateWithoutComponentInput, ComponentItemsUncheckedCreateWithoutComponentInput>
  }

  export type ComponentItemsCreateManyComponentInputEnvelope = {
    data: Enumerable<ComponentItemsCreateManyComponentInput>
  }

  export type SectionsUpsertWithoutComponentsInput = {
    update: XOR<SectionsUpdateWithoutComponentsInput, SectionsUncheckedUpdateWithoutComponentsInput>
    create: XOR<SectionsCreateWithoutComponentsInput, SectionsUncheckedCreateWithoutComponentsInput>
  }

  export type SectionsUpdateWithoutComponentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    profile?: ProfileUpdateOneRequiredWithoutSectionsInput
  }

  export type SectionsUncheckedUpdateWithoutComponentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
  }

  export type ComponentItemsUpsertWithWhereUniqueWithoutComponentInput = {
    where: ComponentItemsWhereUniqueInput
    update: XOR<ComponentItemsUpdateWithoutComponentInput, ComponentItemsUncheckedUpdateWithoutComponentInput>
    create: XOR<ComponentItemsCreateWithoutComponentInput, ComponentItemsUncheckedCreateWithoutComponentInput>
  }

  export type ComponentItemsUpdateWithWhereUniqueWithoutComponentInput = {
    where: ComponentItemsWhereUniqueInput
    data: XOR<ComponentItemsUpdateWithoutComponentInput, ComponentItemsUncheckedUpdateWithoutComponentInput>
  }

  export type ComponentItemsUpdateManyWithWhereWithoutComponentInput = {
    where: ComponentItemsScalarWhereInput
    data: XOR<ComponentItemsUpdateManyMutationInput, ComponentItemsUncheckedUpdateManyWithoutItemsInput>
  }

  export type ComponentItemsScalarWhereInput = {
    AND?: Enumerable<ComponentItemsScalarWhereInput>
    OR?: Enumerable<ComponentItemsScalarWhereInput>
    NOT?: Enumerable<ComponentItemsScalarWhereInput>
    id?: StringFilter | string
    component_id?: StringFilter | string
    type?: StringFilter | string
    title?: StringFilter | string
    value?: IntNullableFilter | number | null
    description?: StringFilter | string
    icon?: StringNullableFilter | string | null
    path?: StringNullableFilter | string | null
  }

  export type SectionsComponentsCreateWithoutItemsInput = {
    id?: string
    type: string
    title: string
    value?: number | null
    description: string
    section: SectionsCreateNestedOneWithoutComponentsInput
  }

  export type SectionsComponentsUncheckedCreateWithoutItemsInput = {
    id?: string
    section_id: string
    type: string
    title: string
    value?: number | null
    description: string
  }

  export type SectionsComponentsCreateOrConnectWithoutItemsInput = {
    where: SectionsComponentsWhereUniqueInput
    create: XOR<SectionsComponentsCreateWithoutItemsInput, SectionsComponentsUncheckedCreateWithoutItemsInput>
  }

  export type SectionsComponentsUpsertWithoutItemsInput = {
    update: XOR<SectionsComponentsUpdateWithoutItemsInput, SectionsComponentsUncheckedUpdateWithoutItemsInput>
    create: XOR<SectionsComponentsCreateWithoutItemsInput, SectionsComponentsUncheckedCreateWithoutItemsInput>
  }

  export type SectionsComponentsUpdateWithoutItemsInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    value?: NullableIntFieldUpdateOperationsInput | number | null
    description?: StringFieldUpdateOperationsInput | string
    section?: SectionsUpdateOneRequiredWithoutComponentsInput
  }

  export type SectionsComponentsUncheckedUpdateWithoutItemsInput = {
    id?: StringFieldUpdateOperationsInput | string
    section_id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    value?: NullableIntFieldUpdateOperationsInput | number | null
    description?: StringFieldUpdateOperationsInput | string
  }

  export type AccountCreateWithoutTokensInput = {
    id?: string
    first_name?: string | null
    last_name?: string | null
    email: string
    created_at: Date | string
    password: string
    priv_level?: number | null
    profile: ProfileCreateNestedOneWithoutAccountInput
  }

  export type AccountUncheckedCreateWithoutTokensInput = {
    id?: string
    username: string
    first_name?: string | null
    last_name?: string | null
    email: string
    created_at: Date | string
    password: string
    priv_level?: number | null
  }

  export type AccountCreateOrConnectWithoutTokensInput = {
    where: AccountWhereUniqueInput
    create: XOR<AccountCreateWithoutTokensInput, AccountUncheckedCreateWithoutTokensInput>
  }

  export type AccountUpsertWithoutTokensInput = {
    update: XOR<AccountUpdateWithoutTokensInput, AccountUncheckedUpdateWithoutTokensInput>
    create: XOR<AccountCreateWithoutTokensInput, AccountUncheckedCreateWithoutTokensInput>
  }

  export type AccountUpdateWithoutTokensInput = {
    id?: StringFieldUpdateOperationsInput | string
    first_name?: NullableStringFieldUpdateOperationsInput | string | null
    last_name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    password?: StringFieldUpdateOperationsInput | string
    priv_level?: NullableIntFieldUpdateOperationsInput | number | null
    profile?: ProfileUpdateOneRequiredWithoutAccountInput
  }

  export type AccountUncheckedUpdateWithoutTokensInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    first_name?: NullableStringFieldUpdateOperationsInput | string | null
    last_name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    password?: StringFieldUpdateOperationsInput | string
    priv_level?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type AccountTokenCreateManyAccount_tokenInput = {
    id?: string
    refresh_token: string
    expires_date: Date | string
    created_at: Date | string
  }

  export type AccountTokenUpdateWithoutAccount_tokenInput = {
    id?: StringFieldUpdateOperationsInput | string
    refresh_token?: StringFieldUpdateOperationsInput | string
    expires_date?: DateTimeFieldUpdateOperationsInput | Date | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AccountTokenUncheckedUpdateWithoutAccount_tokenInput = {
    id?: StringFieldUpdateOperationsInput | string
    refresh_token?: StringFieldUpdateOperationsInput | string
    expires_date?: DateTimeFieldUpdateOperationsInput | Date | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AccountTokenUncheckedUpdateManyWithoutTokensInput = {
    id?: StringFieldUpdateOperationsInput | string
    refresh_token?: StringFieldUpdateOperationsInput | string
    expires_date?: DateTimeFieldUpdateOperationsInput | Date | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SectionsCreateManyProfileInput = {
    id?: string
    title: string
  }

  export type SectionsUpdateWithoutProfileInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    components?: SectionsComponentsUpdateManyWithoutSectionInput
  }

  export type SectionsUncheckedUpdateWithoutProfileInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    components?: SectionsComponentsUncheckedUpdateManyWithoutSectionInput
  }

  export type SectionsUncheckedUpdateManyWithoutSectionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
  }

  export type SectionsComponentsCreateManySectionInput = {
    id?: string
    type: string
    title: string
    value?: number | null
    description: string
  }

  export type SectionsComponentsUpdateWithoutSectionInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    value?: NullableIntFieldUpdateOperationsInput | number | null
    description?: StringFieldUpdateOperationsInput | string
    items?: ComponentItemsUpdateManyWithoutComponentInput
  }

  export type SectionsComponentsUncheckedUpdateWithoutSectionInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    value?: NullableIntFieldUpdateOperationsInput | number | null
    description?: StringFieldUpdateOperationsInput | string
    items?: ComponentItemsUncheckedUpdateManyWithoutComponentInput
  }

  export type SectionsComponentsUncheckedUpdateManyWithoutComponentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    value?: NullableIntFieldUpdateOperationsInput | number | null
    description?: StringFieldUpdateOperationsInput | string
  }

  export type ComponentItemsCreateManyComponentInput = {
    id?: string
    type: string
    title: string
    value?: number | null
    description: string
    icon?: string | null
    path?: string | null
  }

  export type ComponentItemsUpdateWithoutComponentInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    value?: NullableIntFieldUpdateOperationsInput | number | null
    description?: StringFieldUpdateOperationsInput | string
    icon?: NullableStringFieldUpdateOperationsInput | string | null
    path?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ComponentItemsUncheckedUpdateWithoutComponentInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    value?: NullableIntFieldUpdateOperationsInput | number | null
    description?: StringFieldUpdateOperationsInput | string
    icon?: NullableStringFieldUpdateOperationsInput | string | null
    path?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ComponentItemsUncheckedUpdateManyWithoutItemsInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    value?: NullableIntFieldUpdateOperationsInput | number | null
    description?: StringFieldUpdateOperationsInput | string
    icon?: NullableStringFieldUpdateOperationsInput | string | null
    path?: NullableStringFieldUpdateOperationsInput | string | null
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.DMMF.Document;
}